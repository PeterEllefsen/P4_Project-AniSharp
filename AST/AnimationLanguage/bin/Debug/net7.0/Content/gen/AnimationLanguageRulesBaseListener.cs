//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/pelle/OneDrive/Skrivebord/Kode/GitHub/P4-Project/P4-Project/AST/AnimationLanguage/Content\AnimationLanguageRules.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IAnimationLanguageRulesListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class AnimationLanguageRulesBaseListener : IAnimationLanguageRulesListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.s"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterS([NotNull] AnimationLanguageRulesParser.SContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.s"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitS([NotNull] AnimationLanguageRulesParser.SContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] AnimationLanguageRulesParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] AnimationLanguageRulesParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.setupBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetupBlock([NotNull] AnimationLanguageRulesParser.SetupBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.setupBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetupBlock([NotNull] AnimationLanguageRulesParser.SetupBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.grouping"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGrouping([NotNull] AnimationLanguageRulesParser.GroupingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.grouping"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGrouping([NotNull] AnimationLanguageRulesParser.GroupingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.groupingElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupingElements([NotNull] AnimationLanguageRulesParser.GroupingElementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.groupingElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupingElements([NotNull] AnimationLanguageRulesParser.GroupingElementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.keyValuePair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyValuePair([NotNull] AnimationLanguageRulesParser.KeyValuePairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.keyValuePair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyValuePair([NotNull] AnimationLanguageRulesParser.KeyValuePairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.assignments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignments([NotNull] AnimationLanguageRulesParser.AssignmentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.assignments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignments([NotNull] AnimationLanguageRulesParser.AssignmentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] AnimationLanguageRulesParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] AnimationLanguageRulesParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.unary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnary([NotNull] AnimationLanguageRulesParser.UnaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.unary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnary([NotNull] AnimationLanguageRulesParser.UnaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.unaryOperation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryOperation([NotNull] AnimationLanguageRulesParser.UnaryOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.unaryOperation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryOperation([NotNull] AnimationLanguageRulesParser.UnaryOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.assOps"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssOps([NotNull] AnimationLanguageRulesParser.AssOpsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.assOps"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssOps([NotNull] AnimationLanguageRulesParser.AssOpsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] AnimationLanguageRulesParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] AnimationLanguageRulesParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] AnimationLanguageRulesParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] AnimationLanguageRulesParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryExpression([NotNull] AnimationLanguageRulesParser.BinaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryExpression([NotNull] AnimationLanguageRulesParser.BinaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringExpression([NotNull] AnimationLanguageRulesParser.StringExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringExpression([NotNull] AnimationLanguageRulesParser.StringExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] AnimationLanguageRulesParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] AnimationLanguageRulesParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallExpression([NotNull] AnimationLanguageRulesParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallExpression([NotNull] AnimationLanguageRulesParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>shapeInitExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterShapeInitExpression([NotNull] AnimationLanguageRulesParser.ShapeInitExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>shapeInitExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitShapeInitExpression([NotNull] AnimationLanguageRulesParser.ShapeInitExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanExpression([NotNull] AnimationLanguageRulesParser.BooleanExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanExpression([NotNull] AnimationLanguageRulesParser.BooleanExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>integerExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegerExpression([NotNull] AnimationLanguageRulesParser.IntegerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>integerExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegerExpression([NotNull] AnimationLanguageRulesParser.IntegerExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>termExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermExpression([NotNull] AnimationLanguageRulesParser.TermExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>termExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermExpression([NotNull] AnimationLanguageRulesParser.TermExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>floatExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatExpression([NotNull] AnimationLanguageRulesParser.FloatExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>floatExpression</c>
	/// labeled alternative in <see cref="AnimationLanguageRulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatExpression([NotNull] AnimationLanguageRulesParser.FloatExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.boolean"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean([NotNull] AnimationLanguageRulesParser.BooleanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.boolean"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean([NotNull] AnimationLanguageRulesParser.BooleanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperator([NotNull] AnimationLanguageRulesParser.OperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperator([NotNull] AnimationLanguageRulesParser.OperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.funcCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncCall([NotNull] AnimationLanguageRulesParser.FuncCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.funcCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncCall([NotNull] AnimationLanguageRulesParser.FuncCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.funcArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncArgs([NotNull] AnimationLanguageRulesParser.FuncArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.funcArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncArgs([NotNull] AnimationLanguageRulesParser.FuncArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.shapeinit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterShapeinit([NotNull] AnimationLanguageRulesParser.ShapeinitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.shapeinit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitShapeinit([NotNull] AnimationLanguageRulesParser.ShapeinitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.argName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgName([NotNull] AnimationLanguageRulesParser.ArgNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.argName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgName([NotNull] AnimationLanguageRulesParser.ArgNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.arg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArg([NotNull] AnimationLanguageRulesParser.ArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.arg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArg([NotNull] AnimationLanguageRulesParser.ArgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.tuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTuple([NotNull] AnimationLanguageRulesParser.TupleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.tuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTuple([NotNull] AnimationLanguageRulesParser.TupleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.call_parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall_parameters([NotNull] AnimationLanguageRulesParser.Call_parametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.call_parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall_parameters([NotNull] AnimationLanguageRulesParser.Call_parametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.call_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall_parameter([NotNull] AnimationLanguageRulesParser.Call_parameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.call_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall_parameter([NotNull] AnimationLanguageRulesParser.Call_parameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.prototypes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrototypes([NotNull] AnimationLanguageRulesParser.PrototypesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.prototypes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrototypes([NotNull] AnimationLanguageRulesParser.PrototypesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.prototype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrototype([NotNull] AnimationLanguageRulesParser.PrototypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.prototype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrototype([NotNull] AnimationLanguageRulesParser.PrototypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameters([NotNull] AnimationLanguageRulesParser.ParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameters([NotNull] AnimationLanguageRulesParser.ParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameter([NotNull] AnimationLanguageRulesParser.ParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameter([NotNull] AnimationLanguageRulesParser.ParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.funcDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncDecl([NotNull] AnimationLanguageRulesParser.FuncDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.funcDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncDecl([NotNull] AnimationLanguageRulesParser.FuncDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] AnimationLanguageRulesParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] AnimationLanguageRulesParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.statements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatements([NotNull] AnimationLanguageRulesParser.StatementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.statements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatements([NotNull] AnimationLanguageRulesParser.StatementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] AnimationLanguageRulesParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] AnimationLanguageRulesParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.identifierGrouping"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierGrouping([NotNull] AnimationLanguageRulesParser.IdentifierGroupingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.identifierGrouping"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierGrouping([NotNull] AnimationLanguageRulesParser.IdentifierGroupingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.return"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturn([NotNull] AnimationLanguageRulesParser.ReturnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.return"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturn([NotNull] AnimationLanguageRulesParser.ReturnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLoop([NotNull] AnimationLanguageRulesParser.LoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLoop([NotNull] AnimationLanguageRulesParser.LoopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.for_loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFor_loop([NotNull] AnimationLanguageRulesParser.For_loopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.for_loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFor_loop([NotNull] AnimationLanguageRulesParser.For_loopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.while_loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile_loop([NotNull] AnimationLanguageRulesParser.While_loopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.while_loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile_loop([NotNull] AnimationLanguageRulesParser.While_loopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] AnimationLanguageRulesParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] AnimationLanguageRulesParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.logicOpp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicOpp([NotNull] AnimationLanguageRulesParser.LogicOppContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.logicOpp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicOpp([NotNull] AnimationLanguageRulesParser.LogicOppContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.comparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparator([NotNull] AnimationLanguageRulesParser.ComparatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.comparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparator([NotNull] AnimationLanguageRulesParser.ComparatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.conditional"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditional([NotNull] AnimationLanguageRulesParser.ConditionalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.conditional"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditional([NotNull] AnimationLanguageRulesParser.ConditionalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.elseif"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseif([NotNull] AnimationLanguageRulesParser.ElseifContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.elseif"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseif([NotNull] AnimationLanguageRulesParser.ElseifContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElse([NotNull] AnimationLanguageRulesParser.ElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.else"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElse([NotNull] AnimationLanguageRulesParser.ElseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.sequences"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSequences([NotNull] AnimationLanguageRulesParser.SequencesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.sequences"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSequences([NotNull] AnimationLanguageRulesParser.SequencesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.sequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSequence([NotNull] AnimationLanguageRulesParser.SequenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.sequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSequence([NotNull] AnimationLanguageRulesParser.SequenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.sequenceCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSequenceCall([NotNull] AnimationLanguageRulesParser.SequenceCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.sequenceCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSequenceCall([NotNull] AnimationLanguageRulesParser.SequenceCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.seqBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSeqBlock([NotNull] AnimationLanguageRulesParser.SeqBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.seqBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSeqBlock([NotNull] AnimationLanguageRulesParser.SeqBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.seqBlockPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSeqBlockPart([NotNull] AnimationLanguageRulesParser.SeqBlockPartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.seqBlockPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSeqBlockPart([NotNull] AnimationLanguageRulesParser.SeqBlockPartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.animation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnimation([NotNull] AnimationLanguageRulesParser.AnimationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.animation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnimation([NotNull] AnimationLanguageRulesParser.AnimationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.animationPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnimationPart([NotNull] AnimationLanguageRulesParser.AnimationPartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.animationPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnimationPart([NotNull] AnimationLanguageRulesParser.AnimationPartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.transition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTransition([NotNull] AnimationLanguageRulesParser.TransitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.transition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTransition([NotNull] AnimationLanguageRulesParser.TransitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCommand([NotNull] AnimationLanguageRulesParser.CommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCommand([NotNull] AnimationLanguageRulesParser.CommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.timelineBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTimelineBlock([NotNull] AnimationLanguageRulesParser.TimelineBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.timelineBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTimelineBlock([NotNull] AnimationLanguageRulesParser.TimelineBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AnimationLanguageRulesParser.frameDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFrameDef([NotNull] AnimationLanguageRulesParser.FrameDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AnimationLanguageRulesParser.frameDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFrameDef([NotNull] AnimationLanguageRulesParser.FrameDefContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
