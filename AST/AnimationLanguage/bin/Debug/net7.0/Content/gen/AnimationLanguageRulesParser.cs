//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/pelle/OneDrive/Skrivebord/Kode/GitHub/P4-Project/P4-Project/AST/AnimationLanguage/Content\AnimationLanguageRules.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class AnimationLanguageRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SETUP=1, PROTOTYPE=2, TIMELINE=3, FOR=4, WHILE=5, IF=6, ELSE=7, SEQ=8, 
		GROUP=9, INT=10, FLOAT_TYPE=11, STRING_TYPE=12, BOOL=13, CIRCLE=14, POLYGON=15, 
		TRUE=16, FALSE=17, FRAME=18, FUNCTION=19, RETURN=20, PLUS=21, MINUS=22, 
		MULTIPLY=23, DIVIDE=24, MODULO=25, LT=26, GT=27, LE=28, GE=29, EQ=30, 
		NE=31, EQUAL=32, PLUSEQUAL=33, MINUSEQUAL=34, AND=35, OR=36, INC=37, DEC=38, 
		LPAREN=39, RPAREN=40, LBRACE=41, RBRACE=42, LBRACKET=43, RBRACKET=44, 
		COLON=45, SEMICOLON=46, COMMA=47, ARROW=48, MAP=49, QUOTE=50, DOT=51, 
		INTEGER=52, FLOAT=53, IDENTIFIER=54, STRING=55, WS=56, COMMENT=57;
	public const int
		RULE_s = 0, RULE_program = 1, RULE_setupBlock = 2, RULE_grouping = 3, 
		RULE_groupingElements = 4, RULE_keyValuePair = 5, RULE_assignments = 6, 
		RULE_assignment = 7, RULE_unary = 8, RULE_unaryOperation = 9, RULE_assOps = 10, 
		RULE_term = 11, RULE_type = 12, RULE_expression = 13, RULE_boolean = 14, 
		RULE_operator = 15, RULE_funcCall = 16, RULE_funcArgs = 17, RULE_shapeinit = 18, 
		RULE_argName = 19, RULE_arg = 20, RULE_tuple = 21, RULE_call_parameters = 22, 
		RULE_call_parameter = 23, RULE_prototype = 24, RULE_parameters = 25, RULE_parameter = 26, 
		RULE_funcDecl = 27, RULE_block = 28, RULE_statements = 29, RULE_statement = 30, 
		RULE_identifierGrouping = 31, RULE_return = 32, RULE_loop = 33, RULE_for_loop = 34, 
		RULE_while_loop = 35, RULE_logicOpp = 36, RULE_comparator = 37, RULE_conditional = 38, 
		RULE_elseif = 39, RULE_else = 40, RULE_sequences = 41, RULE_sequence = 42, 
		RULE_sequenceCall = 43, RULE_seqBlock = 44, RULE_seqBlockPart = 45, RULE_animation = 46, 
		RULE_animationPart = 47, RULE_transition = 48, RULE_command = 49, RULE_timelineBlock = 50, 
		RULE_frameDef = 51;
	public static readonly string[] ruleNames = {
		"s", "program", "setupBlock", "grouping", "groupingElements", "keyValuePair", 
		"assignments", "assignment", "unary", "unaryOperation", "assOps", "term", 
		"type", "expression", "boolean", "operator", "funcCall", "funcArgs", "shapeinit", 
		"argName", "arg", "tuple", "call_parameters", "call_parameter", "prototype", 
		"parameters", "parameter", "funcDecl", "block", "statements", "statement", 
		"identifierGrouping", "return", "loop", "for_loop", "while_loop", "logicOpp", 
		"comparator", "conditional", "elseif", "else", "sequences", "sequence", 
		"sequenceCall", "seqBlock", "seqBlockPart", "animation", "animationPart", 
		"transition", "command", "timelineBlock", "frameDef"
	};

	private static readonly string[] _LiteralNames = {
		null, "'setup'", "'prototypes'", "'timeline'", "'for'", "'while'", "'if'", 
		"'else'", "'seq'", "'group'", "'int'", "'float'", "'string'", "'bool'", 
		"'Circle'", "'Polygon'", "'true'", "'false'", "'Frame'", "'function'", 
		"'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'='", "'+='", "'-='", "'and'", "'or'", "'++'", "'--'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "';'", "','", "'->'", 
		"'=>'", "'\"'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SETUP", "PROTOTYPE", "TIMELINE", "FOR", "WHILE", "IF", "ELSE", 
		"SEQ", "GROUP", "INT", "FLOAT_TYPE", "STRING_TYPE", "BOOL", "CIRCLE", 
		"POLYGON", "TRUE", "FALSE", "FRAME", "FUNCTION", "RETURN", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "LT", "GT", "LE", "GE", "EQ", "NE", "EQUAL", 
		"PLUSEQUAL", "MINUSEQUAL", "AND", "OR", "INC", "DEC", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COLON", "SEMICOLON", "COMMA", 
		"ARROW", "MAP", "QUOTE", "DOT", "INTEGER", "FLOAT", "IDENTIFIER", "STRING", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnimationLanguageRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnimationLanguageRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnimationLanguageRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnimationLanguageRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AnimationLanguageRulesParser.Eof, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 0, RULE_s);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			program();
			State = 105;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMELINE() { return GetToken(AnimationLanguageRulesParser.TIMELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTOTYPE() { return GetToken(AnimationLanguageRulesParser.PROTOTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrototypeContext[] prototype() {
			return GetRuleContexts<PrototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrototypeContext prototype(int i) {
			return GetRuleContext<PrototypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(AnimationLanguageRulesParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetupBlockContext setupBlock() {
			return GetRuleContext<SetupBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequencesContext sequences() {
			return GetRuleContext<SequencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimelineBlockContext timelineBlock() {
			return GetRuleContext<TimelineBlockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROTOTYPE) {
				{
				State = 107;
				Match(PROTOTYPE);
				State = 108;
				Match(LBRACE);
				State = 109;
				prototype();
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 65024L) != 0)) {
					{
					{
					State = 110;
					prototype();
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 116;
				Match(RBRACE);
				}
			}

			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SETUP) {
				{
				State = 120;
				Match(SETUP);
				State = 121;
				setupBlock();
				}
			}

			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 65024L) != 0)) {
				{
				{
				State = 124;
				funcDecl();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEQ) {
				{
				State = 130;
				sequences();
				}
			}

			State = 133;
			Match(TIMELINE);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 134;
				timelineBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		public SetupBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSetupBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSetupBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetupBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupBlockContext setupBlock() {
		SetupBlockContext _localctx = new SetupBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_setupBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			grouping();
			State = 138;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(AnimationLanguageRulesParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementsContext groupingElements() {
			return GetRuleContext<GroupingElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(AnimationLanguageRulesParser.RBRACKET, 0); }
		public GroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingContext grouping() {
		GroupingContext _localctx = new GroupingContext(Context, State);
		EnterRule(_localctx, 6, RULE_grouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(LBRACKET);
			State = 141;
			groupingElements();
			State = 142;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AnimationLanguageRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AnimationLanguageRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		public GroupingElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterGroupingElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitGroupingElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingElementsContext groupingElements() {
		GroupingElementsContext _localctx = new GroupingElementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_groupingElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 144;
				keyValuePair();
				}
				break;
			case 2:
				{
				State = 145;
				expression(0);
				}
				break;
			case 3:
				{
				State = 146;
				Match(IDENTIFIER);
				}
				break;
			}
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 149;
				Match(COMMA);
				State = 153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 150;
					keyValuePair();
					}
					break;
				case 2:
					{
					State = 151;
					expression(0);
					}
					break;
				case 3:
					{
					State = 152;
					Match(IDENTIFIER);
					}
					break;
				}
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(AnimationLanguageRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 10, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(IDENTIFIER);
			State = 161;
			Match(EQUAL);
			State = 162;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			assignment();
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 165;
				Match(SEMICOLON);
				State = 166;
				assignments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AnimationLanguageRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AnimationLanguageRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssOpsContext assOps() {
			return GetRuleContext<AssOpsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperationContext unaryOperation() {
			return GetRuleContext<UnaryOperationContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 65024L) != 0)) {
					{
					State = 169;
					type();
					}
				}

				State = 172;
				Match(IDENTIFIER);
				State = 173;
				assOps();
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 174;
					expression(0);
					}
					break;
				case 2:
					{
					State = 175;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 179;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 178;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				unaryOperation();
				State = 182;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(AnimationLanguageRulesParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(AnimationLanguageRulesParser.INC, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public UnaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperationContext unaryOperation() {
		UnaryOperationContext _localctx = new UnaryOperationContext(Context, State);
		EnterRule(_localctx, 18, RULE_unaryOperation);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				Match(IDENTIFIER);
				State = 189;
				unary();
				}
				break;
			case INC:
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190;
				unary();
				State = 191;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssOpsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(AnimationLanguageRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(AnimationLanguageRulesParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSEQUAL() { return GetToken(AnimationLanguageRulesParser.MINUSEQUAL, 0); }
		public AssOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assOps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssOpsContext assOps() {
		AssOpsContext _localctx = new AssOpsContext(Context, State);
		EnterRule(_localctx, 20, RULE_assOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 22, RULE_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(LPAREN);
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 198;
				expression(0);
				}
				break;
			case 2:
				{
				State = 199;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 200;
				term();
				}
				break;
			}
			State = 203;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnimationLanguageRulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(AnimationLanguageRulesParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(AnimationLanguageRulesParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AnimationLanguageRulesParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCLE() { return GetToken(AnimationLanguageRulesParser.CIRCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(AnimationLanguageRulesParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65024L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AnimationLanguageRulesParser.STRING, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShapeInitExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShapeinitContext shapeinit() {
			return GetRuleContext<ShapeinitContext>(0);
		}
		public ShapeInitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterShapeInitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitShapeInitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeInitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AnimationLanguageRulesParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		public IntegerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterIntegerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitIntegerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AnimationLanguageRulesParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		public FloatExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFloatExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFloatExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				_localctx = new IntegerExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 208;
					Match(MINUS);
					}
				}

				State = 211;
				Match(INTEGER);
				}
				break;
			case 2:
				{
				_localctx = new FloatExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 212;
					Match(MINUS);
					}
				}

				State = 215;
				Match(FLOAT);
				}
				break;
			case 3:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 216;
				Match(STRING);
				}
				break;
			case 4:
				{
				_localctx = new BooleanExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 217;
				boolean();
				}
				break;
			case 5:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 218;
				Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				funcCall();
				}
				break;
			case 7:
				{
				_localctx = new ShapeInitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				shapeinit();
				}
				break;
			case 8:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 221;
				term();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 224;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 225;
					@operator();
					State = 226;
					expression(6);
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(AnimationLanguageRulesParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(AnimationLanguageRulesParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 28, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AnimationLanguageRulesParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(AnimationLanguageRulesParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(AnimationLanguageRulesParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(AnimationLanguageRulesParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicOppContext logicOpp() {
			return GetRuleContext<LogicOppContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_operator);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				Match(PLUS);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				Match(MINUS);
				}
				break;
			case MULTIPLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237;
				Match(MULTIPLY);
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				Match(DIVIDE);
				}
				break;
			case MODULO:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239;
				Match(MODULO);
				}
				break;
			case LT:
			case GT:
			case LE:
			case GE:
			case EQ:
			case NE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240;
				comparator();
				}
				break;
			case AND:
			case OR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 241;
				logicOpp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgsContext funcArgs() {
			return GetRuleContext<FuncArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(IDENTIFIER);
			State = 245;
			Match(LPAREN);
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67554544170811392L) != 0)) {
				{
				State = 246;
				funcArgs();
				}
			}

			State = 249;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		public FuncArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgsContext funcArgs() {
		FuncArgsContext _localctx = new FuncArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			expression(0);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 252;
				Match(COMMA);
				State = 253;
				expression(0);
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeinitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext[] argName() {
			return GetRuleContexts<ArgNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName(int i) {
			return GetRuleContext<ArgNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(AnimationLanguageRulesParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCLE() { return GetToken(AnimationLanguageRulesParser.CIRCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		public ShapeinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shapeinit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterShapeinit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitShapeinit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeinit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShapeinitContext shapeinit() {
		ShapeinitContext _localctx = new ShapeinitContext(Context, State);
		EnterRule(_localctx, 36, RULE_shapeinit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_la = TokenStream.LA(1);
			if ( !(_la==CIRCLE || _la==POLYGON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 260;
			Match(LPAREN);
			State = 261;
			argName();
			State = 262;
			arg();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 263;
				Match(COMMA);
				State = 264;
				argName();
				State = 265;
				arg();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AnimationLanguageRulesParser.COLON, 0); }
		public ArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameContext argName() {
		ArgNameContext _localctx = new ArgNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_argName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(IDENTIFIER);
			State = 275;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName() {
			return GetRuleContext<ArgNameContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 40, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 277;
				argName();
				}
				break;
			}
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 280;
				tuple();
				}
				break;
			case 2:
				{
				State = 281;
				expression(0);
				}
				break;
			case 3:
				{
				State = 282;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext[] argName() {
			return GetRuleContexts<ArgNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName(int i) {
			return GetRuleContext<ArgNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 42, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(LPAREN);
			State = 286;
			argName();
			State = 287;
			arg();
			State = 288;
			Match(COMMA);
			State = 289;
			argName();
			State = 290;
			arg();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 291;
				Match(COMMA);
				State = 292;
				argName();
				State = 293;
				arg();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 300;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_parameterContext call_parameter() {
			return GetRuleContext<Call_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		public Call_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCall_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCall_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_parametersContext call_parameters() {
		return call_parameters(0);
	}

	private Call_parametersContext call_parameters(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_parametersContext _localctx = new Call_parametersContext(Context, _parentState);
		Call_parametersContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_call_parameters, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 303;
			call_parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_parametersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call_parameters);
					State = 305;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 306;
					Match(COMMA);
					State = 307;
					call_parameter();
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Call_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName() {
			return GetRuleContext<ArgNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public Call_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCall_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCall_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_parameterContext call_parameter() {
		Call_parameterContext _localctx = new Call_parameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_call_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 313;
				argName();
				State = 314;
				arg();
				}
				break;
			case 2:
				{
				State = 316;
				arg();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AnimationLanguageRulesParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public PrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeContext prototype() {
		PrototypeContext _localctx = new PrototypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 319;
				type();
				}
				break;
			case 2:
				{
				State = 320;
				Match(GROUP);
				}
				break;
			}
			State = 323;
			Match(FUNCTION);
			State = 324;
			Match(IDENTIFIER);
			State = 325;
			Match(LPAREN);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398509547008L) != 0)) {
				{
				State = 326;
				parameters();
				}
			}

			State = 329;
			Match(RPAREN);
			State = 330;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			parameter();
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 333;
				Match(COMMA);
				State = 334;
				parameter();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP:
			case INT:
			case FLOAT_TYPE:
			case STRING_TYPE:
			case BOOL:
			case CIRCLE:
			case POLYGON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				type();
				State = 341;
				Match(IDENTIFIER);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				funcCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AnimationLanguageRulesParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 54, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 346;
				type();
				}
				break;
			case 2:
				{
				State = 347;
				Match(GROUP);
				}
				break;
			}
			State = 350;
			Match(FUNCTION);
			State = 351;
			Match(IDENTIFIER);
			State = 352;
			Match(LPAREN);
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398509547008L) != 0)) {
				{
				State = 353;
				parameters();
				}
			}

			State = 356;
			Match(RPAREN);
			State = 357;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(LBRACE);
			State = 360;
			statements();
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 361;
				@return();
				}
			}

			State = 364;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 58, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014810826407536L) != 0)) {
				{
				{
				State = 366;
				statement();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierGroupingContext identifierGrouping() {
			return GetRuleContext<IdentifierGroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_statement);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				identifierGrouping();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				loop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 375;
				conditional();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierGroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(AnimationLanguageRulesParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementsContext groupingElements() {
			return GetRuleContext<GroupingElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(AnimationLanguageRulesParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		public IdentifierGroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierGrouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterIdentifierGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitIdentifierGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierGroupingContext identifierGrouping() {
		IdentifierGroupingContext _localctx = new IdentifierGroupingContext(Context, State);
		EnterRule(_localctx, 62, RULE_identifierGrouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(IDENTIFIER);
			State = 379;
			Match(LBRACKET);
			State = 380;
			groupingElements();
			State = 381;
			Match(RBRACKET);
			State = 382;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AnimationLanguageRulesParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 64, RULE_return);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384;
				Match(RETURN);
				State = 385;
				expression(0);
				State = 386;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				Match(RETURN);
				State = 389;
				grouping();
				State = 390;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 66, RULE_loop);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				for_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AnimationLanguageRulesParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(AnimationLanguageRulesParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(AnimationLanguageRulesParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperationContext unaryOperation() {
			return GetRuleContext<UnaryOperationContext>(0);
		}
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 68, RULE_for_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(FOR);
			State = 399;
			Match(LPAREN);
			State = 400;
			assignment();
			State = 401;
			Match(SEMICOLON);
			State = 402;
			expression(0);
			State = 403;
			Match(SEMICOLON);
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 404;
				assignment();
				}
				break;
			case 2:
				{
				State = 405;
				unaryOperation();
				}
				break;
			}
			State = 408;
			Match(RPAREN);
			State = 409;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AnimationLanguageRulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 70, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(WHILE);
			State = 412;
			Match(LPAREN);
			State = 413;
			expression(0);
			State = 414;
			Match(RPAREN);
			State = 415;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOppContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(AnimationLanguageRulesParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(AnimationLanguageRulesParser.OR, 0); }
		public LogicOppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOpp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterLogicOpp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitLogicOpp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOpp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicOppContext logicOpp() {
		LogicOppContext _localctx = new LogicOppContext(Context, State);
		EnterRule(_localctx, 72, RULE_logicOpp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(AnimationLanguageRulesParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(AnimationLanguageRulesParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(AnimationLanguageRulesParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(AnimationLanguageRulesParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AnimationLanguageRulesParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(AnimationLanguageRulesParser.NE, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4227858432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AnimationLanguageRulesParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifContext[] elseif() {
			return GetRuleContexts<ElseifContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifContext elseif(int i) {
			return GetRuleContext<ElseifContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 76, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(IF);
			State = 422;
			Match(LPAREN);
			State = 423;
			expression(0);
			State = 424;
			Match(RPAREN);
			State = 425;
			block();
			State = 429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 426;
					elseif();
					}
					} 
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 432;
				@else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AnimationLanguageRulesParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AnimationLanguageRulesParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterElseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitElseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifContext elseif() {
		ElseifContext _localctx = new ElseifContext(Context, State);
		EnterRule(_localctx, 78, RULE_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(ELSE);
			State = 436;
			Match(IF);
			State = 437;
			Match(LPAREN);
			State = 438;
			expression(0);
			State = 439;
			Match(RPAREN);
			State = 440;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AnimationLanguageRulesParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 80, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(ELSE);
			State = 443;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequencesContext sequences() {
			return GetRuleContext<SequencesContext>(0);
		}
		public SequencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSequences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSequences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequencesContext sequences() {
		SequencesContext _localctx = new SequencesContext(Context, State);
		EnterRule(_localctx, 82, RULE_sequences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			sequence();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEQ) {
				{
				State = 446;
				sequences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQ() { return GetToken(AnimationLanguageRulesParser.SEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockContext seqBlock() {
			return GetRuleContext<SeqBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 84, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(SEQ);
			State = 450;
			Match(IDENTIFIER);
			State = 451;
			Match(LPAREN);
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398509547008L) != 0)) {
				{
				State = 452;
				parameters();
				}
			}

			State = 455;
			Match(RPAREN);
			State = 456;
			seqBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		public SequenceCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSequenceCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSequenceCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequenceCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceCallContext sequenceCall() {
		SequenceCallContext _localctx = new SequenceCallContext(Context, State);
		EnterRule(_localctx, 86, RULE_sequenceCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(IDENTIFIER);
			State = 459;
			Match(LPAREN);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67554544170811392L) != 0)) {
				{
				State = 460;
				call_parameters(0);
				}
			}

			State = 463;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockPartContext[] seqBlockPart() {
			return GetRuleContexts<SeqBlockPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockPartContext seqBlockPart(int i) {
			return GetRuleContext<SeqBlockPartContext>(i);
		}
		public SeqBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSeqBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSeqBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeqBlockContext seqBlock() {
		SeqBlockContext _localctx = new SeqBlockContext(Context, State);
		EnterRule(_localctx, 88, RULE_seqBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(LBRACE);
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014810826407536L) != 0)) {
				{
				{
				State = 466;
				seqBlockPart();
				}
				}
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 472;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqBlockPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimationContext animation() {
			return GetRuleContext<AnimationContext>(0);
		}
		public SeqBlockPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqBlockPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSeqBlockPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSeqBlockPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqBlockPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeqBlockPartContext seqBlockPart() {
		SeqBlockPartContext _localctx = new SeqBlockPartContext(Context, State);
		EnterRule(_localctx, 90, RULE_seqBlockPart);
		try {
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				animation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnimationPartContext[] animationPart() {
			return GetRuleContexts<AnimationPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimationPartContext animationPart(int i) {
			return GetRuleContext<AnimationPartContext>(i);
		}
		public AnimationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAnimation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAnimation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimationContext animation() {
		AnimationContext _localctx = new AnimationContext(Context, State);
		EnterRule(_localctx, 92, RULE_animation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(IDENTIFIER);
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 479;
				animationPart();
				}
				}
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ARROW );
			State = 484;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimationPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition() {
			return GetRuleContext<TransitionContext>(0);
		}
		public AnimationPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animationPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAnimationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAnimationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimationPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimationPartContext animationPart() {
		AnimationPartContext _localctx = new AnimationPartContext(Context, State);
		EnterRule(_localctx, 94, RULE_animationPart);
		try {
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486;
				command();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 487;
				transition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(AnimationLanguageRulesParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parameterContext[] call_parameter() {
			return GetRuleContexts<Call_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_parameterContext call_parameter(int i) {
			return GetRuleContext<Call_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_transition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(ARROW);
			State = 491;
			Match(LPAREN);
			State = 492;
			call_parameter();
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 493;
				Match(COMMA);
				State = 494;
				call_parameter();
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 500;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(AnimationLanguageRulesParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 98, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(ARROW);
			State = 503;
			Match(IDENTIFIER);
			State = 504;
			Match(LPAREN);
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67554544170811392L) != 0)) {
				{
				State = 505;
				call_parameters(0);
				}
			}

			State = 508;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimelineBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameDefContext[] frameDef() {
			return GetRuleContexts<FrameDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameDefContext frameDef(int i) {
			return GetRuleContext<FrameDefContext>(i);
		}
		public TimelineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timelineBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTimelineBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTimelineBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimelineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimelineBlockContext timelineBlock() {
		TimelineBlockContext _localctx = new TimelineBlockContext(Context, State);
		EnterRule(_localctx, 100, RULE_timelineBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(LBRACE);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FRAME) {
				{
				{
				State = 511;
				frameDef();
				}
				}
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 517;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAME() { return GetToken(AnimationLanguageRulesParser.FRAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AnimationLanguageRulesParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AnimationLanguageRulesParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceCallContext sequenceCall() {
			return GetRuleContext<SequenceCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		public FrameDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFrameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFrameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameDefContext frameDef() {
		FrameDefContext _localctx = new FrameDefContext(Context, State);
		EnterRule(_localctx, 102, RULE_frameDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			Match(FRAME);
			State = 520;
			Match(INTEGER);
			State = 521;
			Match(COLON);
			State = 522;
			sequenceCall();
			State = 523;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 22: return call_parameters_sempred((Call_parametersContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}
	private bool call_parameters_sempred(Call_parametersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,526,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,112,8,1,10,1,12,1,
		115,9,1,1,1,1,1,3,1,119,8,1,1,1,1,1,3,1,123,8,1,1,1,5,1,126,8,1,10,1,12,
		1,129,9,1,1,1,3,1,132,8,1,1,1,1,1,3,1,136,8,1,1,2,1,2,1,2,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,3,4,148,8,4,1,4,1,4,1,4,1,4,3,4,154,8,4,5,4,156,8,4,10,
		4,12,4,159,9,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,168,8,6,1,7,3,7,171,8,7,
		1,7,1,7,1,7,1,7,3,7,177,8,7,1,7,3,7,180,8,7,1,7,1,7,1,7,3,7,185,8,7,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,194,8,9,1,10,1,10,1,11,1,11,1,11,1,11,3,
		11,202,8,11,1,11,1,11,1,12,1,12,1,13,1,13,3,13,210,8,13,1,13,1,13,3,13,
		214,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,223,8,13,1,13,1,13,1,
		13,1,13,5,13,229,8,13,10,13,12,13,232,9,13,1,14,1,14,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,3,15,243,8,15,1,16,1,16,1,16,3,16,248,8,16,1,16,1,16,
		1,17,1,17,1,17,5,17,255,8,17,10,17,12,17,258,9,17,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,5,18,268,8,18,10,18,12,18,271,9,18,1,18,1,18,1,19,
		1,19,1,19,1,20,3,20,279,8,20,1,20,1,20,1,20,3,20,284,8,20,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,296,8,21,10,21,12,21,299,9,
		21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,309,8,22,10,22,12,22,312,
		9,22,1,23,1,23,1,23,1,23,3,23,318,8,23,1,24,1,24,3,24,322,8,24,1,24,1,
		24,1,24,1,24,3,24,328,8,24,1,24,1,24,1,24,1,25,1,25,1,25,5,25,336,8,25,
		10,25,12,25,339,9,25,1,26,1,26,1,26,1,26,3,26,345,8,26,1,27,1,27,3,27,
		349,8,27,1,27,1,27,1,27,1,27,3,27,355,8,27,1,27,1,27,1,27,1,28,1,28,1,
		28,3,28,363,8,28,1,28,1,28,1,29,5,29,368,8,29,10,29,12,29,371,9,29,1,30,
		1,30,1,30,1,30,3,30,377,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,3,32,393,8,32,1,33,1,33,3,33,397,8,33,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,407,8,34,1,34,1,34,1,34,1,35,1,
		35,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,
		38,5,38,428,8,38,10,38,12,38,431,9,38,1,38,3,38,434,8,38,1,39,1,39,1,39,
		1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,3,41,448,8,41,1,42,1,42,1,
		42,1,42,3,42,454,8,42,1,42,1,42,1,42,1,43,1,43,1,43,3,43,462,8,43,1,43,
		1,43,1,44,1,44,5,44,468,8,44,10,44,12,44,471,9,44,1,44,1,44,1,45,1,45,
		3,45,477,8,45,1,46,1,46,4,46,481,8,46,11,46,12,46,482,1,46,1,46,1,47,1,
		47,3,47,489,8,47,1,48,1,48,1,48,1,48,1,48,5,48,496,8,48,10,48,12,48,499,
		9,48,1,48,1,48,1,49,1,49,1,49,1,49,3,49,507,8,49,1,49,1,49,1,50,1,50,5,
		50,513,8,50,10,50,12,50,516,9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,
		51,1,51,0,2,26,44,52,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,0,7,1,0,37,38,1,0,32,34,1,0,9,15,1,0,16,
		17,1,0,14,15,1,0,35,36,1,0,26,31,543,0,104,1,0,0,0,2,118,1,0,0,0,4,137,
		1,0,0,0,6,140,1,0,0,0,8,147,1,0,0,0,10,160,1,0,0,0,12,164,1,0,0,0,14,184,
		1,0,0,0,16,186,1,0,0,0,18,193,1,0,0,0,20,195,1,0,0,0,22,197,1,0,0,0,24,
		205,1,0,0,0,26,222,1,0,0,0,28,233,1,0,0,0,30,242,1,0,0,0,32,244,1,0,0,
		0,34,251,1,0,0,0,36,259,1,0,0,0,38,274,1,0,0,0,40,278,1,0,0,0,42,285,1,
		0,0,0,44,302,1,0,0,0,46,317,1,0,0,0,48,321,1,0,0,0,50,332,1,0,0,0,52,344,
		1,0,0,0,54,348,1,0,0,0,56,359,1,0,0,0,58,369,1,0,0,0,60,376,1,0,0,0,62,
		378,1,0,0,0,64,392,1,0,0,0,66,396,1,0,0,0,68,398,1,0,0,0,70,411,1,0,0,
		0,72,417,1,0,0,0,74,419,1,0,0,0,76,421,1,0,0,0,78,435,1,0,0,0,80,442,1,
		0,0,0,82,445,1,0,0,0,84,449,1,0,0,0,86,458,1,0,0,0,88,465,1,0,0,0,90,476,
		1,0,0,0,92,478,1,0,0,0,94,488,1,0,0,0,96,490,1,0,0,0,98,502,1,0,0,0,100,
		510,1,0,0,0,102,519,1,0,0,0,104,105,3,2,1,0,105,106,5,0,0,1,106,1,1,0,
		0,0,107,108,5,2,0,0,108,109,5,41,0,0,109,113,3,48,24,0,110,112,3,48,24,
		0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,
		116,1,0,0,0,115,113,1,0,0,0,116,117,5,42,0,0,117,119,1,0,0,0,118,107,1,
		0,0,0,118,119,1,0,0,0,119,122,1,0,0,0,120,121,5,1,0,0,121,123,3,4,2,0,
		122,120,1,0,0,0,122,123,1,0,0,0,123,127,1,0,0,0,124,126,3,54,27,0,125,
		124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,131,1,
		0,0,0,129,127,1,0,0,0,130,132,3,82,41,0,131,130,1,0,0,0,131,132,1,0,0,
		0,132,133,1,0,0,0,133,135,5,3,0,0,134,136,3,100,50,0,135,134,1,0,0,0,135,
		136,1,0,0,0,136,3,1,0,0,0,137,138,3,6,3,0,138,139,5,46,0,0,139,5,1,0,0,
		0,140,141,5,43,0,0,141,142,3,8,4,0,142,143,5,44,0,0,143,7,1,0,0,0,144,
		148,3,10,5,0,145,148,3,26,13,0,146,148,5,54,0,0,147,144,1,0,0,0,147,145,
		1,0,0,0,147,146,1,0,0,0,148,157,1,0,0,0,149,153,5,47,0,0,150,154,3,10,
		5,0,151,154,3,26,13,0,152,154,5,54,0,0,153,150,1,0,0,0,153,151,1,0,0,0,
		153,152,1,0,0,0,154,156,1,0,0,0,155,149,1,0,0,0,156,159,1,0,0,0,157,155,
		1,0,0,0,157,158,1,0,0,0,158,9,1,0,0,0,159,157,1,0,0,0,160,161,5,54,0,0,
		161,162,5,32,0,0,162,163,3,26,13,0,163,11,1,0,0,0,164,167,3,14,7,0,165,
		166,5,46,0,0,166,168,3,12,6,0,167,165,1,0,0,0,167,168,1,0,0,0,168,13,1,
		0,0,0,169,171,3,24,12,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,
		0,172,173,5,54,0,0,173,176,3,20,10,0,174,177,3,26,13,0,175,177,5,54,0,
		0,176,174,1,0,0,0,176,175,1,0,0,0,177,179,1,0,0,0,178,180,5,46,0,0,179,
		178,1,0,0,0,179,180,1,0,0,0,180,185,1,0,0,0,181,182,3,18,9,0,182,183,5,
		46,0,0,183,185,1,0,0,0,184,170,1,0,0,0,184,181,1,0,0,0,185,15,1,0,0,0,
		186,187,7,0,0,0,187,17,1,0,0,0,188,189,5,54,0,0,189,194,3,16,8,0,190,191,
		3,16,8,0,191,192,5,54,0,0,192,194,1,0,0,0,193,188,1,0,0,0,193,190,1,0,
		0,0,194,19,1,0,0,0,195,196,7,1,0,0,196,21,1,0,0,0,197,201,5,39,0,0,198,
		202,3,26,13,0,199,202,5,54,0,0,200,202,3,22,11,0,201,198,1,0,0,0,201,199,
		1,0,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,204,5,40,0,0,204,23,1,0,0,
		0,205,206,7,2,0,0,206,25,1,0,0,0,207,209,6,13,-1,0,208,210,5,22,0,0,209,
		208,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,223,5,52,0,0,212,214,5,
		22,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,223,5,53,0,
		0,216,223,5,55,0,0,217,223,3,28,14,0,218,223,5,54,0,0,219,223,3,32,16,
		0,220,223,3,36,18,0,221,223,3,22,11,0,222,207,1,0,0,0,222,213,1,0,0,0,
		222,216,1,0,0,0,222,217,1,0,0,0,222,218,1,0,0,0,222,219,1,0,0,0,222,220,
		1,0,0,0,222,221,1,0,0,0,223,230,1,0,0,0,224,225,10,5,0,0,225,226,3,30,
		15,0,226,227,3,26,13,6,227,229,1,0,0,0,228,224,1,0,0,0,229,232,1,0,0,0,
		230,228,1,0,0,0,230,231,1,0,0,0,231,27,1,0,0,0,232,230,1,0,0,0,233,234,
		7,3,0,0,234,29,1,0,0,0,235,243,5,21,0,0,236,243,5,22,0,0,237,243,5,23,
		0,0,238,243,5,24,0,0,239,243,5,25,0,0,240,243,3,74,37,0,241,243,3,72,36,
		0,242,235,1,0,0,0,242,236,1,0,0,0,242,237,1,0,0,0,242,238,1,0,0,0,242,
		239,1,0,0,0,242,240,1,0,0,0,242,241,1,0,0,0,243,31,1,0,0,0,244,245,5,54,
		0,0,245,247,5,39,0,0,246,248,3,34,17,0,247,246,1,0,0,0,247,248,1,0,0,0,
		248,249,1,0,0,0,249,250,5,40,0,0,250,33,1,0,0,0,251,256,3,26,13,0,252,
		253,5,47,0,0,253,255,3,26,13,0,254,252,1,0,0,0,255,258,1,0,0,0,256,254,
		1,0,0,0,256,257,1,0,0,0,257,35,1,0,0,0,258,256,1,0,0,0,259,260,7,4,0,0,
		260,261,5,39,0,0,261,262,3,38,19,0,262,269,3,40,20,0,263,264,5,47,0,0,
		264,265,3,38,19,0,265,266,3,40,20,0,266,268,1,0,0,0,267,263,1,0,0,0,268,
		271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,
		0,0,0,272,273,5,40,0,0,273,37,1,0,0,0,274,275,5,54,0,0,275,276,5,45,0,
		0,276,39,1,0,0,0,277,279,3,38,19,0,278,277,1,0,0,0,278,279,1,0,0,0,279,
		283,1,0,0,0,280,284,3,42,21,0,281,284,3,26,13,0,282,284,5,54,0,0,283,280,
		1,0,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,41,1,0,0,0,285,286,5,39,0,
		0,286,287,3,38,19,0,287,288,3,40,20,0,288,289,5,47,0,0,289,290,3,38,19,
		0,290,297,3,40,20,0,291,292,5,47,0,0,292,293,3,38,19,0,293,294,3,40,20,
		0,294,296,1,0,0,0,295,291,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,
		298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,5,40,0,0,301,43,1,
		0,0,0,302,303,6,22,-1,0,303,304,3,46,23,0,304,310,1,0,0,0,305,306,10,2,
		0,0,306,307,5,47,0,0,307,309,3,46,23,0,308,305,1,0,0,0,309,312,1,0,0,0,
		310,308,1,0,0,0,310,311,1,0,0,0,311,45,1,0,0,0,312,310,1,0,0,0,313,314,
		3,38,19,0,314,315,3,40,20,0,315,318,1,0,0,0,316,318,3,40,20,0,317,313,
		1,0,0,0,317,316,1,0,0,0,318,47,1,0,0,0,319,322,3,24,12,0,320,322,5,9,0,
		0,321,319,1,0,0,0,321,320,1,0,0,0,322,323,1,0,0,0,323,324,5,19,0,0,324,
		325,5,54,0,0,325,327,5,39,0,0,326,328,3,50,25,0,327,326,1,0,0,0,327,328,
		1,0,0,0,328,329,1,0,0,0,329,330,5,40,0,0,330,331,5,46,0,0,331,49,1,0,0,
		0,332,337,3,52,26,0,333,334,5,47,0,0,334,336,3,52,26,0,335,333,1,0,0,0,
		336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,51,1,0,0,0,339,337,
		1,0,0,0,340,341,3,24,12,0,341,342,5,54,0,0,342,345,1,0,0,0,343,345,3,32,
		16,0,344,340,1,0,0,0,344,343,1,0,0,0,345,53,1,0,0,0,346,349,3,24,12,0,
		347,349,5,9,0,0,348,346,1,0,0,0,348,347,1,0,0,0,349,350,1,0,0,0,350,351,
		5,19,0,0,351,352,5,54,0,0,352,354,5,39,0,0,353,355,3,50,25,0,354,353,1,
		0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,5,40,0,0,357,358,3,56,28,
		0,358,55,1,0,0,0,359,360,5,41,0,0,360,362,3,58,29,0,361,363,3,64,32,0,
		362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,5,42,0,0,365,57,
		1,0,0,0,366,368,3,60,30,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,
		0,0,369,370,1,0,0,0,370,59,1,0,0,0,371,369,1,0,0,0,372,377,3,14,7,0,373,
		377,3,62,31,0,374,377,3,66,33,0,375,377,3,76,38,0,376,372,1,0,0,0,376,
		373,1,0,0,0,376,374,1,0,0,0,376,375,1,0,0,0,377,61,1,0,0,0,378,379,5,54,
		0,0,379,380,5,43,0,0,380,381,3,8,4,0,381,382,5,44,0,0,382,383,5,46,0,0,
		383,63,1,0,0,0,384,385,5,20,0,0,385,386,3,26,13,0,386,387,5,46,0,0,387,
		393,1,0,0,0,388,389,5,20,0,0,389,390,3,6,3,0,390,391,5,46,0,0,391,393,
		1,0,0,0,392,384,1,0,0,0,392,388,1,0,0,0,393,65,1,0,0,0,394,397,3,68,34,
		0,395,397,3,70,35,0,396,394,1,0,0,0,396,395,1,0,0,0,397,67,1,0,0,0,398,
		399,5,4,0,0,399,400,5,39,0,0,400,401,3,14,7,0,401,402,5,46,0,0,402,403,
		3,26,13,0,403,406,5,46,0,0,404,407,3,14,7,0,405,407,3,18,9,0,406,404,1,
		0,0,0,406,405,1,0,0,0,407,408,1,0,0,0,408,409,5,40,0,0,409,410,3,56,28,
		0,410,69,1,0,0,0,411,412,5,5,0,0,412,413,5,39,0,0,413,414,3,26,13,0,414,
		415,5,40,0,0,415,416,3,56,28,0,416,71,1,0,0,0,417,418,7,5,0,0,418,73,1,
		0,0,0,419,420,7,6,0,0,420,75,1,0,0,0,421,422,5,6,0,0,422,423,5,39,0,0,
		423,424,3,26,13,0,424,425,5,40,0,0,425,429,3,56,28,0,426,428,3,78,39,0,
		427,426,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,433,
		1,0,0,0,431,429,1,0,0,0,432,434,3,80,40,0,433,432,1,0,0,0,433,434,1,0,
		0,0,434,77,1,0,0,0,435,436,5,7,0,0,436,437,5,6,0,0,437,438,5,39,0,0,438,
		439,3,26,13,0,439,440,5,40,0,0,440,441,3,56,28,0,441,79,1,0,0,0,442,443,
		5,7,0,0,443,444,3,56,28,0,444,81,1,0,0,0,445,447,3,84,42,0,446,448,3,82,
		41,0,447,446,1,0,0,0,447,448,1,0,0,0,448,83,1,0,0,0,449,450,5,8,0,0,450,
		451,5,54,0,0,451,453,5,39,0,0,452,454,3,50,25,0,453,452,1,0,0,0,453,454,
		1,0,0,0,454,455,1,0,0,0,455,456,5,40,0,0,456,457,3,88,44,0,457,85,1,0,
		0,0,458,459,5,54,0,0,459,461,5,39,0,0,460,462,3,44,22,0,461,460,1,0,0,
		0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,40,0,0,464,87,1,0,0,0,465,
		469,5,41,0,0,466,468,3,90,45,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,
		1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,0,0,472,473,5,42,0,
		0,473,89,1,0,0,0,474,477,3,60,30,0,475,477,3,92,46,0,476,474,1,0,0,0,476,
		475,1,0,0,0,477,91,1,0,0,0,478,480,5,54,0,0,479,481,3,94,47,0,480,479,
		1,0,0,0,481,482,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,
		0,484,485,5,46,0,0,485,93,1,0,0,0,486,489,3,98,49,0,487,489,3,96,48,0,
		488,486,1,0,0,0,488,487,1,0,0,0,489,95,1,0,0,0,490,491,5,48,0,0,491,492,
		5,39,0,0,492,497,3,46,23,0,493,494,5,47,0,0,494,496,3,46,23,0,495,493,
		1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,
		0,499,497,1,0,0,0,500,501,5,40,0,0,501,97,1,0,0,0,502,503,5,48,0,0,503,
		504,5,54,0,0,504,506,5,39,0,0,505,507,3,44,22,0,506,505,1,0,0,0,506,507,
		1,0,0,0,507,508,1,0,0,0,508,509,5,40,0,0,509,99,1,0,0,0,510,514,5,41,0,
		0,511,513,3,102,51,0,512,511,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,
		515,1,0,0,0,515,517,1,0,0,0,516,514,1,0,0,0,517,518,5,42,0,0,518,101,1,
		0,0,0,519,520,5,18,0,0,520,521,5,52,0,0,521,522,5,45,0,0,522,523,3,86,
		43,0,523,524,5,46,0,0,524,103,1,0,0,0,53,113,118,122,127,131,135,147,153,
		157,167,170,176,179,184,193,201,209,213,222,230,242,247,256,269,278,283,
		297,310,317,321,327,337,344,348,354,362,369,376,392,396,406,429,433,447,
		453,461,469,476,482,488,497,506,514
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
