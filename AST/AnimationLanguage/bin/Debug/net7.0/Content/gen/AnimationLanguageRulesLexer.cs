//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/pelle/OneDrive/Skrivebord/Kode/GitHub/P4-Project/P4-Project/AST/AnimationLanguage/Content\AnimationLanguageRules.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class AnimationLanguageRulesLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SETUP=1, PROTOTYPE=2, TIMELINE=3, FOR=4, WHILE=5, IF=6, ELSE=7, SEQ=8, 
		VOID=9, GROUP=10, INT=11, FLOAT_TYPE=12, STRING_TYPE=13, BOOL=14, CIRCLE=15, 
		POLYGON=16, TRUE=17, FALSE=18, FRAME=19, FUNCTION=20, RETURN=21, PLUS=22, 
		MINUS=23, MULTIPLY=24, DIVIDE=25, MODULO=26, LT=27, GT=28, LE=29, GE=30, 
		EQ=31, NE=32, EQUAL=33, PLUSEQUAL=34, MINUSEQUAL=35, AND=36, OR=37, INC=38, 
		DEC=39, LPAREN=40, RPAREN=41, LBRACE=42, RBRACE=43, LBRACKET=44, RBRACKET=45, 
		COLON=46, SEMICOLON=47, COMMA=48, ARROW=49, MAP=50, QUOTE=51, DOT=52, 
		INTEGER=53, FLOAT=54, IDENTIFIER=55, STRING=56, WS=57, COMMENT=58;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SETUP", "PROTOTYPE", "TIMELINE", "FOR", "WHILE", "IF", "ELSE", "SEQ", 
		"VOID", "GROUP", "INT", "FLOAT_TYPE", "STRING_TYPE", "BOOL", "CIRCLE", 
		"POLYGON", "TRUE", "FALSE", "FRAME", "FUNCTION", "RETURN", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "LT", "GT", "LE", "GE", "EQ", "NE", "EQUAL", 
		"PLUSEQUAL", "MINUSEQUAL", "AND", "OR", "INC", "DEC", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COLON", "SEMICOLON", "COMMA", 
		"ARROW", "MAP", "QUOTE", "DOT", "DIGIT", "LETTER", "WS_CHAR", "SPECIAL_CHAR", 
		"INTEGER", "FLOAT", "IDENTIFIER", "STRING", "WS", "COMMENT"
	};


	public AnimationLanguageRulesLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AnimationLanguageRulesLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'setup'", "'prototypes'", "'timeline'", "'for'", "'while'", "'if'", 
		"'else'", "'seq'", "'void'", "'group'", "'int'", "'float'", "'string'", 
		"'bool'", "'Circle'", "'Polygon'", "'true'", "'false'", "'Frame'", "'function'", 
		"'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'='", "'+='", "'-='", "'and'", "'or'", "'++'", "'--'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "';'", "','", "'->'", 
		"'=>'", "'\"'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SETUP", "PROTOTYPE", "TIMELINE", "FOR", "WHILE", "IF", "ELSE", 
		"SEQ", "VOID", "GROUP", "INT", "FLOAT_TYPE", "STRING_TYPE", "BOOL", "CIRCLE", 
		"POLYGON", "TRUE", "FALSE", "FRAME", "FUNCTION", "RETURN", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "LT", "GT", "LE", "GE", "EQ", "NE", "EQUAL", 
		"PLUSEQUAL", "MINUSEQUAL", "AND", "OR", "INC", "DEC", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COLON", "SEMICOLON", "COMMA", 
		"ARROW", "MAP", "QUOTE", "DOT", "INTEGER", "FLOAT", "IDENTIFIER", "STRING", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnimationLanguageRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnimationLanguageRulesLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,58,391,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,0,
		1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
		1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
		1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,
		1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,
		1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
		1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,
		1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
		1,55,1,56,4,56,339,8,56,11,56,12,56,340,1,57,4,57,344,8,57,11,57,12,57,
		345,1,57,1,57,4,57,350,8,57,11,57,12,57,351,1,58,1,58,1,58,5,58,357,8,
		58,10,58,12,58,360,9,58,1,59,1,59,1,59,1,59,1,59,5,59,367,8,59,10,59,12,
		59,370,9,59,1,59,1,59,1,60,4,60,375,8,60,11,60,12,60,376,1,60,1,60,1,61,
		1,61,1,61,1,61,5,61,385,8,61,10,61,12,61,388,9,61,1,61,1,61,0,0,62,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
		79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
		51,103,52,105,0,107,0,109,0,111,0,113,53,115,54,117,55,119,56,121,57,123,
		58,1,0,5,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,6,0,9,10,13,13,
		32,32,42,47,58,62,92,92,2,0,10,10,13,13,397,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
		0,0,0,123,1,0,0,0,1,125,1,0,0,0,3,131,1,0,0,0,5,142,1,0,0,0,7,151,1,0,
		0,0,9,155,1,0,0,0,11,161,1,0,0,0,13,164,1,0,0,0,15,169,1,0,0,0,17,173,
		1,0,0,0,19,178,1,0,0,0,21,184,1,0,0,0,23,188,1,0,0,0,25,194,1,0,0,0,27,
		201,1,0,0,0,29,206,1,0,0,0,31,213,1,0,0,0,33,221,1,0,0,0,35,226,1,0,0,
		0,37,232,1,0,0,0,39,238,1,0,0,0,41,247,1,0,0,0,43,254,1,0,0,0,45,256,1,
		0,0,0,47,258,1,0,0,0,49,260,1,0,0,0,51,262,1,0,0,0,53,264,1,0,0,0,55,266,
		1,0,0,0,57,268,1,0,0,0,59,271,1,0,0,0,61,274,1,0,0,0,63,277,1,0,0,0,65,
		280,1,0,0,0,67,282,1,0,0,0,69,285,1,0,0,0,71,288,1,0,0,0,73,292,1,0,0,
		0,75,295,1,0,0,0,77,298,1,0,0,0,79,301,1,0,0,0,81,303,1,0,0,0,83,305,1,
		0,0,0,85,307,1,0,0,0,87,309,1,0,0,0,89,311,1,0,0,0,91,313,1,0,0,0,93,315,
		1,0,0,0,95,317,1,0,0,0,97,319,1,0,0,0,99,322,1,0,0,0,101,325,1,0,0,0,103,
		327,1,0,0,0,105,329,1,0,0,0,107,331,1,0,0,0,109,333,1,0,0,0,111,335,1,
		0,0,0,113,338,1,0,0,0,115,343,1,0,0,0,117,353,1,0,0,0,119,361,1,0,0,0,
		121,374,1,0,0,0,123,380,1,0,0,0,125,126,5,115,0,0,126,127,5,101,0,0,127,
		128,5,116,0,0,128,129,5,117,0,0,129,130,5,112,0,0,130,2,1,0,0,0,131,132,
		5,112,0,0,132,133,5,114,0,0,133,134,5,111,0,0,134,135,5,116,0,0,135,136,
		5,111,0,0,136,137,5,116,0,0,137,138,5,121,0,0,138,139,5,112,0,0,139,140,
		5,101,0,0,140,141,5,115,0,0,141,4,1,0,0,0,142,143,5,116,0,0,143,144,5,
		105,0,0,144,145,5,109,0,0,145,146,5,101,0,0,146,147,5,108,0,0,147,148,
		5,105,0,0,148,149,5,110,0,0,149,150,5,101,0,0,150,6,1,0,0,0,151,152,5,
		102,0,0,152,153,5,111,0,0,153,154,5,114,0,0,154,8,1,0,0,0,155,156,5,119,
		0,0,156,157,5,104,0,0,157,158,5,105,0,0,158,159,5,108,0,0,159,160,5,101,
		0,0,160,10,1,0,0,0,161,162,5,105,0,0,162,163,5,102,0,0,163,12,1,0,0,0,
		164,165,5,101,0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,168,5,101,0,
		0,168,14,1,0,0,0,169,170,5,115,0,0,170,171,5,101,0,0,171,172,5,113,0,0,
		172,16,1,0,0,0,173,174,5,118,0,0,174,175,5,111,0,0,175,176,5,105,0,0,176,
		177,5,100,0,0,177,18,1,0,0,0,178,179,5,103,0,0,179,180,5,114,0,0,180,181,
		5,111,0,0,181,182,5,117,0,0,182,183,5,112,0,0,183,20,1,0,0,0,184,185,5,
		105,0,0,185,186,5,110,0,0,186,187,5,116,0,0,187,22,1,0,0,0,188,189,5,102,
		0,0,189,190,5,108,0,0,190,191,5,111,0,0,191,192,5,97,0,0,192,193,5,116,
		0,0,193,24,1,0,0,0,194,195,5,115,0,0,195,196,5,116,0,0,196,197,5,114,0,
		0,197,198,5,105,0,0,198,199,5,110,0,0,199,200,5,103,0,0,200,26,1,0,0,0,
		201,202,5,98,0,0,202,203,5,111,0,0,203,204,5,111,0,0,204,205,5,108,0,0,
		205,28,1,0,0,0,206,207,5,67,0,0,207,208,5,105,0,0,208,209,5,114,0,0,209,
		210,5,99,0,0,210,211,5,108,0,0,211,212,5,101,0,0,212,30,1,0,0,0,213,214,
		5,80,0,0,214,215,5,111,0,0,215,216,5,108,0,0,216,217,5,121,0,0,217,218,
		5,103,0,0,218,219,5,111,0,0,219,220,5,110,0,0,220,32,1,0,0,0,221,222,5,
		116,0,0,222,223,5,114,0,0,223,224,5,117,0,0,224,225,5,101,0,0,225,34,1,
		0,0,0,226,227,5,102,0,0,227,228,5,97,0,0,228,229,5,108,0,0,229,230,5,115,
		0,0,230,231,5,101,0,0,231,36,1,0,0,0,232,233,5,70,0,0,233,234,5,114,0,
		0,234,235,5,97,0,0,235,236,5,109,0,0,236,237,5,101,0,0,237,38,1,0,0,0,
		238,239,5,102,0,0,239,240,5,117,0,0,240,241,5,110,0,0,241,242,5,99,0,0,
		242,243,5,116,0,0,243,244,5,105,0,0,244,245,5,111,0,0,245,246,5,110,0,
		0,246,40,1,0,0,0,247,248,5,114,0,0,248,249,5,101,0,0,249,250,5,116,0,0,
		250,251,5,117,0,0,251,252,5,114,0,0,252,253,5,110,0,0,253,42,1,0,0,0,254,
		255,5,43,0,0,255,44,1,0,0,0,256,257,5,45,0,0,257,46,1,0,0,0,258,259,5,
		42,0,0,259,48,1,0,0,0,260,261,5,47,0,0,261,50,1,0,0,0,262,263,5,37,0,0,
		263,52,1,0,0,0,264,265,5,60,0,0,265,54,1,0,0,0,266,267,5,62,0,0,267,56,
		1,0,0,0,268,269,5,60,0,0,269,270,5,61,0,0,270,58,1,0,0,0,271,272,5,62,
		0,0,272,273,5,61,0,0,273,60,1,0,0,0,274,275,5,61,0,0,275,276,5,61,0,0,
		276,62,1,0,0,0,277,278,5,33,0,0,278,279,5,61,0,0,279,64,1,0,0,0,280,281,
		5,61,0,0,281,66,1,0,0,0,282,283,5,43,0,0,283,284,5,61,0,0,284,68,1,0,0,
		0,285,286,5,45,0,0,286,287,5,61,0,0,287,70,1,0,0,0,288,289,5,97,0,0,289,
		290,5,110,0,0,290,291,5,100,0,0,291,72,1,0,0,0,292,293,5,111,0,0,293,294,
		5,114,0,0,294,74,1,0,0,0,295,296,5,43,0,0,296,297,5,43,0,0,297,76,1,0,
		0,0,298,299,5,45,0,0,299,300,5,45,0,0,300,78,1,0,0,0,301,302,5,40,0,0,
		302,80,1,0,0,0,303,304,5,41,0,0,304,82,1,0,0,0,305,306,5,123,0,0,306,84,
		1,0,0,0,307,308,5,125,0,0,308,86,1,0,0,0,309,310,5,91,0,0,310,88,1,0,0,
		0,311,312,5,93,0,0,312,90,1,0,0,0,313,314,5,58,0,0,314,92,1,0,0,0,315,
		316,5,59,0,0,316,94,1,0,0,0,317,318,5,44,0,0,318,96,1,0,0,0,319,320,5,
		45,0,0,320,321,5,62,0,0,321,98,1,0,0,0,322,323,5,61,0,0,323,324,5,62,0,
		0,324,100,1,0,0,0,325,326,5,34,0,0,326,102,1,0,0,0,327,328,5,46,0,0,328,
		104,1,0,0,0,329,330,7,0,0,0,330,106,1,0,0,0,331,332,7,1,0,0,332,108,1,
		0,0,0,333,334,7,2,0,0,334,110,1,0,0,0,335,336,8,3,0,0,336,112,1,0,0,0,
		337,339,3,105,52,0,338,337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,
		341,1,0,0,0,341,114,1,0,0,0,342,344,3,105,52,0,343,342,1,0,0,0,344,345,
		1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,349,5,46,0,
		0,348,350,3,105,52,0,349,348,1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,
		352,1,0,0,0,352,116,1,0,0,0,353,358,3,107,53,0,354,357,3,107,53,0,355,
		357,3,105,52,0,356,354,1,0,0,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,
		1,0,0,0,358,359,1,0,0,0,359,118,1,0,0,0,360,358,1,0,0,0,361,368,3,101,
		50,0,362,367,3,107,53,0,363,367,3,105,52,0,364,367,3,111,55,0,365,367,
		3,109,54,0,366,362,1,0,0,0,366,363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,
		0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,
		368,1,0,0,0,371,372,3,101,50,0,372,120,1,0,0,0,373,375,7,2,0,0,374,373,
		1,0,0,0,375,376,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,
		0,378,379,6,60,0,0,379,122,1,0,0,0,380,381,5,47,0,0,381,382,5,47,0,0,382,
		386,1,0,0,0,383,385,8,4,0,0,384,383,1,0,0,0,385,388,1,0,0,0,386,384,1,
		0,0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,386,1,0,0,0,389,390,6,61,0,0,
		390,124,1,0,0,0,10,0,340,345,351,356,358,366,368,376,386,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
