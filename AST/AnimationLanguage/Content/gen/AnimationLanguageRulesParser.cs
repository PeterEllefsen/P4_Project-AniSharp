//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/pelle/OneDrive/Skrivebord/Kode/GitHub/P4-Project/P4-Project/AST/AnimationLanguage/Content\AnimationLanguageRules.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class AnimationLanguageRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SETUP=1, PROTOTYPE=2, TIMELINE=3, FOR=4, WHILE=5, IF=6, ELSE=7, SEQ=8, 
		VOID=9, GROUP=10, INT=11, FLOAT_TYPE=12, STRING_TYPE=13, BOOL=14, CIRCLE=15, 
		POLYGON=16, TRUE=17, FALSE=18, FRAME=19, FUNCTION=20, RETURN=21, PLUS=22, 
		MINUS=23, MULTIPLY=24, DIVIDE=25, MODULO=26, LT=27, GT=28, LE=29, GE=30, 
		EQ=31, NE=32, EQUAL=33, PLUSEQUAL=34, MINUSEQUAL=35, AND=36, OR=37, INC=38, 
		DEC=39, LPAREN=40, RPAREN=41, LBRACE=42, RBRACE=43, LBRACKET=44, RBRACKET=45, 
		COLON=46, SEMICOLON=47, COMMA=48, ARROW=49, MAP=50, QUOTE=51, DOT=52, 
		INTEGER=53, FLOAT=54, IDENTIFIER=55, STRING=56, WS=57, COMMENT=58;
	public const int
		RULE_s = 0, RULE_program = 1, RULE_setupBlock = 2, RULE_grouping = 3, 
		RULE_groupingElements = 4, RULE_keyValuePair = 5, RULE_assignments = 6, 
		RULE_assignment = 7, RULE_unary = 8, RULE_assOps = 9, RULE_term = 10, 
		RULE_type = 11, RULE_expression = 12, RULE_boolean = 13, RULE_operator = 14, 
		RULE_funcCall = 15, RULE_shapeinit = 16, RULE_argName = 17, RULE_arg = 18, 
		RULE_tuple = 19, RULE_call_parameters = 20, RULE_call_parameter = 21, 
		RULE_prototypes = 22, RULE_prototype = 23, RULE_parameters = 24, RULE_parameter = 25, 
		RULE_funcDecl = 26, RULE_block = 27, RULE_statements = 28, RULE_statement = 29, 
		RULE_identifierGrouping = 30, RULE_return = 31, RULE_loop = 32, RULE_for_loop = 33, 
		RULE_while_loop = 34, RULE_condition = 35, RULE_logicOpp = 36, RULE_comparator = 37, 
		RULE_conditional = 38, RULE_elseif = 39, RULE_else = 40, RULE_sequences = 41, 
		RULE_sequence = 42, RULE_seqBlock = 43, RULE_seqBlockParts = 44, RULE_animation = 45, 
		RULE_transitions = 46, RULE_transition = 47, RULE_command = 48, RULE_timelineBlock = 49, 
		RULE_frameDef = 50;
	public static readonly string[] ruleNames = {
		"s", "program", "setupBlock", "grouping", "groupingElements", "keyValuePair", 
		"assignments", "assignment", "unary", "assOps", "term", "type", "expression", 
		"boolean", "operator", "funcCall", "shapeinit", "argName", "arg", "tuple", 
		"call_parameters", "call_parameter", "prototypes", "prototype", "parameters", 
		"parameter", "funcDecl", "block", "statements", "statement", "identifierGrouping", 
		"return", "loop", "for_loop", "while_loop", "condition", "logicOpp", "comparator", 
		"conditional", "elseif", "else", "sequences", "sequence", "seqBlock", 
		"seqBlockParts", "animation", "transitions", "transition", "command", 
		"timelineBlock", "frameDef"
	};

	private static readonly string[] _LiteralNames = {
		null, "'setup'", "'prototypes'", "'timeline'", "'for'", "'while'", "'if'", 
		"'else'", "'seq'", "'void'", "'group'", "'int'", "'float'", "'string'", 
		"'bool'", "'Circle'", "'Polygon'", "'true'", "'false'", "'Frame'", "'function'", 
		"'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'='", "'+='", "'-='", "'and'", "'or'", "'++'", "'--'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "';'", "','", "'->'", 
		"'=>'", "'\"'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SETUP", "PROTOTYPE", "TIMELINE", "FOR", "WHILE", "IF", "ELSE", 
		"SEQ", "VOID", "GROUP", "INT", "FLOAT_TYPE", "STRING_TYPE", "BOOL", "CIRCLE", 
		"POLYGON", "TRUE", "FALSE", "FRAME", "FUNCTION", "RETURN", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "LT", "GT", "LE", "GE", "EQ", "NE", "EQUAL", 
		"PLUSEQUAL", "MINUSEQUAL", "AND", "OR", "INC", "DEC", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COLON", "SEMICOLON", "COMMA", 
		"ARROW", "MAP", "QUOTE", "DOT", "INTEGER", "FLOAT", "IDENTIFIER", "STRING", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnimationLanguageRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnimationLanguageRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnimationLanguageRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnimationLanguageRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AnimationLanguageRulesParser.Eof, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 0, RULE_s);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			program();
			State = 103;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMELINE() { return GetToken(AnimationLanguageRulesParser.TIMELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTOTYPE() { return GetToken(AnimationLanguageRulesParser.PROTOTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrototypesContext prototypes() {
			return GetRuleContext<PrototypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(AnimationLanguageRulesParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetupBlockContext setupBlock() {
			return GetRuleContext<SetupBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequencesContext sequences() {
			return GetRuleContext<SequencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimelineBlockContext timelineBlock() {
			return GetRuleContext<TimelineBlockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROTOTYPE) {
				{
				State = 105;
				Match(PROTOTYPE);
				State = 106;
				Match(LBRACE);
				State = 107;
				prototypes();
				State = 108;
				Match(RBRACE);
				}
			}

			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SETUP) {
				{
				State = 112;
				Match(SETUP);
				State = 113;
				setupBlock();
				}
			}

			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 130560L) != 0)) {
				{
				{
				State = 116;
				funcDecl();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEQ) {
				{
				State = 122;
				sequences();
				}
			}

			State = 125;
			Match(TIMELINE);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 126;
				timelineBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		public SetupBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSetupBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSetupBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetupBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupBlockContext setupBlock() {
		SetupBlockContext _localctx = new SetupBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_setupBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			grouping();
			State = 130;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(AnimationLanguageRulesParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementsContext groupingElements() {
			return GetRuleContext<GroupingElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(AnimationLanguageRulesParser.RBRACKET, 0); }
		public GroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingContext grouping() {
		GroupingContext _localctx = new GroupingContext(Context, State);
		EnterRule(_localctx, 6, RULE_grouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(LBRACKET);
			State = 133;
			groupingElements();
			State = 134;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair() {
			return GetRuleContext<KeyValuePairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementsContext groupingElements() {
			return GetRuleContext<GroupingElementsContext>(0);
		}
		public GroupingElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterGroupingElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitGroupingElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingElementsContext groupingElements() {
		GroupingElementsContext _localctx = new GroupingElementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_groupingElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 136;
				keyValuePair();
				}
				break;
			case 2:
				{
				State = 137;
				expression(0);
				}
				break;
			case 3:
				{
				State = 138;
				Match(IDENTIFIER);
				}
				break;
			}
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 141;
				Match(COMMA);
				State = 142;
				groupingElements();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(AnimationLanguageRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 10, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(IDENTIFIER);
			State = 146;
			Match(EQUAL);
			State = 147;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			assignment();
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 150;
				Match(SEMICOLON);
				State = 151;
				assignments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AnimationLanguageRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AnimationLanguageRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssOpsContext assOps() {
			return GetRuleContext<AssOpsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) {
					{
					State = 154;
					type();
					}
				}

				State = 157;
				Match(IDENTIFIER);
				State = 158;
				assOps();
				State = 161;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 159;
					expression(0);
					}
					break;
				case 2:
					{
					State = 160;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 164;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 163;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				Match(IDENTIFIER);
				State = 167;
				unary();
				State = 169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 168;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				unary();
				State = 172;
				Match(IDENTIFIER);
				State = 174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 173;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 176;
				Match(IDENTIFIER);
				State = 177;
				grouping();
				State = 178;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(AnimationLanguageRulesParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(AnimationLanguageRulesParser.INC, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssOpsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(AnimationLanguageRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(AnimationLanguageRulesParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSEQUAL() { return GetToken(AnimationLanguageRulesParser.MINUSEQUAL, 0); }
		public AssOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assOps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssOpsContext assOps() {
		AssOpsContext _localctx = new AssOpsContext(Context, State);
		EnterRule(_localctx, 18, RULE_assOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 20, RULE_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(LPAREN);
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 187;
				expression(0);
				}
				break;
			case 2:
				{
				State = 188;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 189;
				term();
				}
				break;
			}
			State = 192;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnimationLanguageRulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(AnimationLanguageRulesParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(AnimationLanguageRulesParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AnimationLanguageRulesParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCLE() { return GetToken(AnimationLanguageRulesParser.CIRCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(AnimationLanguageRulesParser.POLYGON, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AnimationLanguageRulesParser.STRING, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShapeInitExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShapeinitContext shapeinit() {
			return GetRuleContext<ShapeinitContext>(0);
		}
		public ShapeInitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterShapeInitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitShapeInitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeInitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AnimationLanguageRulesParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		public IntegerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterIntegerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitIntegerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AnimationLanguageRulesParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		public FloatExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFloatExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFloatExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				_localctx = new IntegerExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 197;
					Match(MINUS);
					}
				}

				State = 200;
				Match(INTEGER);
				}
				break;
			case 2:
				{
				_localctx = new FloatExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 201;
					Match(MINUS);
					}
				}

				State = 204;
				Match(FLOAT);
				}
				break;
			case 3:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 205;
				Match(STRING);
				}
				break;
			case 4:
				{
				_localctx = new BooleanExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 206;
				boolean();
				}
				break;
			case 5:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207;
				Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 208;
				funcCall();
				}
				break;
			case 7:
				{
				_localctx = new ShapeInitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 209;
				shapeinit();
				}
				break;
			case 8:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 210;
				term();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 213;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 214;
					@operator();
					State = 215;
					expression(6);
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(AnimationLanguageRulesParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(AnimationLanguageRulesParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 26, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AnimationLanguageRulesParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(AnimationLanguageRulesParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(AnimationLanguageRulesParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(AnimationLanguageRulesParser.MODULO, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 130023424L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(IDENTIFIER);
			State = 227;
			Match(LPAREN);
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135109088341622784L) != 0)) {
				{
				State = 228;
				call_parameters(0);
				}
			}

			State = 231;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeinitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext[] argName() {
			return GetRuleContexts<ArgNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName(int i) {
			return GetRuleContext<ArgNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(AnimationLanguageRulesParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCLE() { return GetToken(AnimationLanguageRulesParser.CIRCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		public ShapeinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shapeinit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterShapeinit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitShapeinit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeinit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShapeinitContext shapeinit() {
		ShapeinitContext _localctx = new ShapeinitContext(Context, State);
		EnterRule(_localctx, 32, RULE_shapeinit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !(_la==CIRCLE || _la==POLYGON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 234;
			Match(LPAREN);
			State = 235;
			argName();
			State = 236;
			arg();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 237;
				Match(COMMA);
				State = 238;
				argName();
				State = 239;
				arg();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AnimationLanguageRulesParser.COLON, 0); }
		public ArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameContext argName() {
		ArgNameContext _localctx = new ArgNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_argName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(IDENTIFIER);
			State = 249;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 36, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 251;
				tuple();
				}
				break;
			case 2:
				{
				State = 252;
				expression(0);
				}
				break;
			case 3:
				{
				State = 253;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext[] argName() {
			return GetRuleContexts<ArgNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName(int i) {
			return GetRuleContext<ArgNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 38, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(LPAREN);
			State = 257;
			argName();
			State = 258;
			arg();
			State = 259;
			Match(COMMA);
			State = 260;
			argName();
			State = 261;
			arg();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 262;
				Match(COMMA);
				State = 263;
				argName();
				State = 264;
				arg();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 271;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_parameterContext call_parameter() {
			return GetRuleContext<Call_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		public Call_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCall_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCall_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_parametersContext call_parameters() {
		return call_parameters(0);
	}

	private Call_parametersContext call_parameters(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_parametersContext _localctx = new Call_parametersContext(Context, _parentState);
		Call_parametersContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_call_parameters, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 274;
			call_parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_parametersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call_parameters);
					State = 276;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 277;
					Match(COMMA);
					State = 278;
					call_parameter();
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Call_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName() {
			return GetRuleContext<ArgNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public Call_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCall_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCall_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_parameterContext call_parameter() {
		Call_parameterContext _localctx = new Call_parameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_call_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 284;
				argName();
				State = 285;
				arg();
				}
				break;
			case 2:
				{
				State = 287;
				arg();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrototypeContext prototype() {
			return GetRuleContext<PrototypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrototypesContext prototypes() {
			return GetRuleContext<PrototypesContext>(0);
		}
		public PrototypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterPrototypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitPrototypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrototypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrototypesContext prototypes() {
		PrototypesContext _localctx = new PrototypesContext(Context, State);
		EnterRule(_localctx, 44, RULE_prototypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			prototype();
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 291;
				Match(COMMA);
				State = 292;
				prototypes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AnimationLanguageRulesParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AnimationLanguageRulesParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public PrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeContext prototype() {
		PrototypeContext _localctx = new PrototypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT_TYPE:
			case STRING_TYPE:
			case BOOL:
			case CIRCLE:
			case POLYGON:
				{
				State = 295;
				type();
				}
				break;
			case VOID:
				{
				State = 296;
				Match(VOID);
				}
				break;
			case GROUP:
				{
				State = 297;
				Match(GROUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 300;
			Match(FUNCTION);
			State = 301;
			Match(IDENTIFIER);
			State = 302;
			Match(LPAREN);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) {
				{
				State = 303;
				parameters();
				}
			}

			State = 306;
			Match(RPAREN);
			State = 307;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameters);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				parameter();
				State = 312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 310;
					Match(COMMA);
					State = 311;
					parameters();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314;
				parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameter);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				type();
				State = 318;
				Match(IDENTIFIER);
				State = 321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 319;
					Match(COMMA);
					State = 320;
					parameters();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				type();
				State = 324;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AnimationLanguageRulesParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AnimationLanguageRulesParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 52, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT_TYPE:
			case STRING_TYPE:
			case BOOL:
			case CIRCLE:
			case POLYGON:
				{
				State = 328;
				type();
				}
				break;
			case VOID:
				{
				State = 329;
				Match(VOID);
				}
				break;
			case GROUP:
				{
				State = 330;
				Match(GROUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 333;
			Match(FUNCTION);
			State = 334;
			Match(IDENTIFIER);
			State = 335;
			Match(LPAREN);
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) {
				{
				State = 336;
				parameters();
				}
			}

			State = 339;
			Match(RPAREN);
			State = 340;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(LBRACE);
			State = 343;
			statements();
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 344;
				@return();
				}
			}

			State = 347;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 56, RULE_statements);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				statement();
				State = 350;
				statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 352;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierGroupingContext identifierGrouping() {
			return GetRuleContext<IdentifierGroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_statement);
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				identifierGrouping();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				loop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 358;
				conditional();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierGroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementsContext groupingElements() {
			return GetRuleContext<GroupingElementsContext>(0);
		}
		public IdentifierGroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierGrouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterIdentifierGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitIdentifierGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierGroupingContext identifierGrouping() {
		IdentifierGroupingContext _localctx = new IdentifierGroupingContext(Context, State);
		EnterRule(_localctx, 60, RULE_identifierGrouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(IDENTIFIER);
			State = 362;
			groupingElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AnimationLanguageRulesParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 62, RULE_return);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				Match(RETURN);
				State = 365;
				expression(0);
				State = 366;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				Match(RETURN);
				State = 369;
				grouping();
				State = 370;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 64, RULE_loop);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374;
				for_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AnimationLanguageRulesParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 66, RULE_for_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(FOR);
			State = 379;
			Match(LPAREN);
			State = 380;
			assignment();
			State = 381;
			condition();
			State = 382;
			Match(SEMICOLON);
			State = 383;
			assignment();
			State = 384;
			Match(RPAREN);
			State = 385;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AnimationLanguageRulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 68, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(WHILE);
			State = 388;
			Match(LPAREN);
			State = 389;
			condition();
			State = 390;
			Match(RPAREN);
			State = 391;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext[] comparator() {
			return GetRuleContexts<ComparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator(int i) {
			return GetRuleContext<ComparatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicOppContext[] logicOpp() {
			return GetRuleContexts<LogicOppContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicOppContext logicOpp(int i) {
			return GetRuleContext<LogicOppContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 70, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			expression(0);
			State = 396;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
			case GT:
			case LE:
			case GE:
			case EQ:
			case NE:
				{
				State = 394;
				comparator();
				}
				break;
			case AND:
			case OR:
				{
				State = 395;
				logicOpp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 398;
			expression(0);
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 214614147072L) != 0)) {
				{
				{
				State = 401;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LT:
				case GT:
				case LE:
				case GE:
				case EQ:
				case NE:
					{
					State = 399;
					comparator();
					}
					break;
				case AND:
				case OR:
					{
					State = 400;
					logicOpp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 403;
				expression(0);
				}
				}
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOppContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(AnimationLanguageRulesParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(AnimationLanguageRulesParser.OR, 0); }
		public LogicOppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOpp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterLogicOpp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitLogicOpp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOpp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicOppContext logicOpp() {
		LogicOppContext _localctx = new LogicOppContext(Context, State);
		EnterRule(_localctx, 72, RULE_logicOpp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(AnimationLanguageRulesParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(AnimationLanguageRulesParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(AnimationLanguageRulesParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(AnimationLanguageRulesParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AnimationLanguageRulesParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(AnimationLanguageRulesParser.NE, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8455716864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AnimationLanguageRulesParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifContext[] elseif() {
			return GetRuleContexts<ElseifContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifContext elseif(int i) {
			return GetRuleContext<ElseifContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 76, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(IF);
			State = 415;
			Match(LPAREN);
			State = 416;
			condition();
			State = 417;
			Match(RPAREN);
			State = 418;
			block();
			State = 422;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 419;
					elseif();
					}
					} 
				}
				State = 424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 425;
				@else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AnimationLanguageRulesParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AnimationLanguageRulesParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterElseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitElseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifContext elseif() {
		ElseifContext _localctx = new ElseifContext(Context, State);
		EnterRule(_localctx, 78, RULE_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(ELSE);
			State = 429;
			Match(IF);
			State = 430;
			Match(LPAREN);
			State = 431;
			condition();
			State = 432;
			Match(RPAREN);
			State = 433;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AnimationLanguageRulesParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 80, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(ELSE);
			State = 436;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequencesContext sequences() {
			return GetRuleContext<SequencesContext>(0);
		}
		public SequencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSequences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSequences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequencesContext sequences() {
		SequencesContext _localctx = new SequencesContext(Context, State);
		EnterRule(_localctx, 82, RULE_sequences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			sequence();
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEQ) {
				{
				State = 439;
				sequences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQ() { return GetToken(AnimationLanguageRulesParser.SEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockContext seqBlock() {
			return GetRuleContext<SeqBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 84, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(SEQ);
			State = 443;
			Match(IDENTIFIER);
			State = 444;
			Match(LPAREN);
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) {
				{
				State = 445;
				parameters();
				}
			}

			State = 448;
			Match(RPAREN);
			State = 449;
			seqBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockPartsContext seqBlockParts() {
			return GetRuleContext<SeqBlockPartsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		public SeqBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSeqBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSeqBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeqBlockContext seqBlock() {
		SeqBlockContext _localctx = new SeqBlockContext(Context, State);
		EnterRule(_localctx, 86, RULE_seqBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(LBRACE);
			State = 452;
			seqBlockParts();
			State = 453;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqBlockPartsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockPartsContext seqBlockParts() {
			return GetRuleContext<SeqBlockPartsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimationContext animation() {
			return GetRuleContext<AnimationContext>(0);
		}
		public SeqBlockPartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqBlockParts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSeqBlockParts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSeqBlockParts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqBlockParts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeqBlockPartsContext seqBlockParts() {
		SeqBlockPartsContext _localctx = new SeqBlockPartsContext(Context, State);
		EnterRule(_localctx, 88, RULE_seqBlockParts);
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				statement();
				State = 456;
				seqBlockParts();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 459;
				animation();
				State = 460;
				seqBlockParts();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 462;
				animation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransitionsContext transitions() {
			return GetRuleContext<TransitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public AnimationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAnimation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAnimation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimationContext animation() {
		AnimationContext _localctx = new AnimationContext(Context, State);
		EnterRule(_localctx, 90, RULE_animation);
		try {
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465;
				Match(IDENTIFIER);
				State = 466;
				transitions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 467;
				Match(IDENTIFIER);
				State = 468;
				command();
				State = 469;
				transitions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition() {
			return GetRuleContext<TransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionsContext transitions() {
			return GetRuleContext<TransitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public TransitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionsContext transitions() {
		TransitionsContext _localctx = new TransitionsContext(Context, State);
		EnterRule(_localctx, 92, RULE_transitions);
		try {
			State = 482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473;
				transition();
				State = 474;
				transitions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				transition();
				State = 477;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 479;
				command();
				State = 480;
				transitions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(AnimationLanguageRulesParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 94, RULE_transition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(ARROW);
			State = 485;
			Match(LPAREN);
			State = 486;
			call_parameters(0);
			State = 487;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(AnimationLanguageRulesParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 96, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(ARROW);
			State = 490;
			Match(IDENTIFIER);
			State = 491;
			Match(LPAREN);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135109088341622784L) != 0)) {
				{
				State = 492;
				call_parameters(0);
				}
			}

			State = 495;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimelineBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameDefContext[] frameDef() {
			return GetRuleContexts<FrameDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameDefContext frameDef(int i) {
			return GetRuleContext<FrameDefContext>(i);
		}
		public TimelineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timelineBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTimelineBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTimelineBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimelineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimelineBlockContext timelineBlock() {
		TimelineBlockContext _localctx = new TimelineBlockContext(Context, State);
		EnterRule(_localctx, 98, RULE_timelineBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(LBRACE);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FRAME) {
				{
				{
				State = 498;
				frameDef();
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 504;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAME() { return GetToken(AnimationLanguageRulesParser.FRAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AnimationLanguageRulesParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AnimationLanguageRulesParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FrameDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFrameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFrameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameDefContext frameDef() {
		FrameDefContext _localctx = new FrameDefContext(Context, State);
		EnterRule(_localctx, 100, RULE_frameDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(FRAME);
			State = 507;
			Match(INTEGER);
			State = 508;
			Match(COLON);
			State = 509;
			Match(IDENTIFIER);
			State = 510;
			Match(LPAREN);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) {
				{
				State = 511;
				parameters();
				}
			}

			State = 514;
			Match(RPAREN);
			State = 515;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return call_parameters_sempred((Call_parametersContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}
	private bool call_parameters_sempred(Call_parametersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,58,518,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,111,8,1,1,1,1,1,3,1,115,
		8,1,1,1,5,1,118,8,1,10,1,12,1,121,9,1,1,1,3,1,124,8,1,1,1,1,1,3,1,128,
		8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,3,4,140,8,4,1,4,1,4,3,4,144,
		8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,153,8,6,1,7,3,7,156,8,7,1,7,1,7,1,
		7,1,7,3,7,162,8,7,1,7,3,7,165,8,7,1,7,1,7,1,7,3,7,170,8,7,1,7,1,7,1,7,
		3,7,175,8,7,1,7,1,7,1,7,1,7,3,7,181,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,
		1,10,3,10,191,8,10,1,10,1,10,1,11,1,11,1,12,1,12,3,12,199,8,12,1,12,1,
		12,3,12,203,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,212,8,12,1,12,
		1,12,1,12,1,12,5,12,218,8,12,10,12,12,12,221,9,12,1,13,1,13,1,14,1,14,
		1,15,1,15,1,15,3,15,230,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,5,16,242,8,16,10,16,12,16,245,9,16,1,16,1,16,1,17,1,17,1,17,1,
		18,1,18,1,18,3,18,255,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,5,19,267,8,19,10,19,12,19,270,9,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,5,20,280,8,20,10,20,12,20,283,9,20,1,21,1,21,1,21,1,21,3,21,
		289,8,21,1,22,1,22,1,22,3,22,294,8,22,1,23,1,23,1,23,3,23,299,8,23,1,23,
		1,23,1,23,1,23,3,23,305,8,23,1,23,1,23,1,23,1,24,1,24,1,24,3,24,313,8,
		24,1,24,3,24,316,8,24,1,25,1,25,1,25,1,25,3,25,322,8,25,1,25,1,25,1,25,
		3,25,327,8,25,1,26,1,26,1,26,3,26,332,8,26,1,26,1,26,1,26,1,26,3,26,338,
		8,26,1,26,1,26,1,26,1,27,1,27,1,27,3,27,346,8,27,1,27,1,27,1,28,1,28,1,
		28,1,28,3,28,354,8,28,1,29,1,29,1,29,1,29,3,29,360,8,29,1,30,1,30,1,30,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,373,8,31,1,32,1,32,3,32,377,
		8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
		1,34,1,34,1,35,1,35,1,35,3,35,397,8,35,1,35,1,35,1,35,3,35,402,8,35,1,
		35,1,35,5,35,406,8,35,10,35,12,35,409,9,35,1,36,1,36,1,37,1,37,1,38,1,
		38,1,38,1,38,1,38,1,38,5,38,421,8,38,10,38,12,38,424,9,38,1,38,3,38,427,
		8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,3,41,
		441,8,41,1,42,1,42,1,42,1,42,3,42,447,8,42,1,42,1,42,1,42,1,43,1,43,1,
		43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,464,8,44,1,45,1,45,
		1,45,1,45,1,45,1,45,3,45,472,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
		46,1,46,3,46,483,8,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,
		494,8,48,1,48,1,48,1,49,1,49,5,49,500,8,49,10,49,12,49,503,9,49,1,49,1,
		49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,513,8,50,1,50,1,50,1,50,1,50,0,2,
		24,40,51,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,0,8,1,0,38,39,1,0,33,35,1,0,11,16,1,0,17,18,1,0,22,26,
		1,0,15,16,1,0,36,37,1,0,27,32,536,0,102,1,0,0,0,2,110,1,0,0,0,4,129,1,
		0,0,0,6,132,1,0,0,0,8,139,1,0,0,0,10,145,1,0,0,0,12,149,1,0,0,0,14,180,
		1,0,0,0,16,182,1,0,0,0,18,184,1,0,0,0,20,186,1,0,0,0,22,194,1,0,0,0,24,
		211,1,0,0,0,26,222,1,0,0,0,28,224,1,0,0,0,30,226,1,0,0,0,32,233,1,0,0,
		0,34,248,1,0,0,0,36,254,1,0,0,0,38,256,1,0,0,0,40,273,1,0,0,0,42,288,1,
		0,0,0,44,290,1,0,0,0,46,298,1,0,0,0,48,315,1,0,0,0,50,326,1,0,0,0,52,331,
		1,0,0,0,54,342,1,0,0,0,56,353,1,0,0,0,58,359,1,0,0,0,60,361,1,0,0,0,62,
		372,1,0,0,0,64,376,1,0,0,0,66,378,1,0,0,0,68,387,1,0,0,0,70,393,1,0,0,
		0,72,410,1,0,0,0,74,412,1,0,0,0,76,414,1,0,0,0,78,428,1,0,0,0,80,435,1,
		0,0,0,82,438,1,0,0,0,84,442,1,0,0,0,86,451,1,0,0,0,88,463,1,0,0,0,90,471,
		1,0,0,0,92,482,1,0,0,0,94,484,1,0,0,0,96,489,1,0,0,0,98,497,1,0,0,0,100,
		506,1,0,0,0,102,103,3,2,1,0,103,104,5,0,0,1,104,1,1,0,0,0,105,106,5,2,
		0,0,106,107,5,42,0,0,107,108,3,44,22,0,108,109,5,43,0,0,109,111,1,0,0,
		0,110,105,1,0,0,0,110,111,1,0,0,0,111,114,1,0,0,0,112,113,5,1,0,0,113,
		115,3,4,2,0,114,112,1,0,0,0,114,115,1,0,0,0,115,119,1,0,0,0,116,118,3,
		52,26,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,
		0,120,123,1,0,0,0,121,119,1,0,0,0,122,124,3,82,41,0,123,122,1,0,0,0,123,
		124,1,0,0,0,124,125,1,0,0,0,125,127,5,3,0,0,126,128,3,98,49,0,127,126,
		1,0,0,0,127,128,1,0,0,0,128,3,1,0,0,0,129,130,3,6,3,0,130,131,5,47,0,0,
		131,5,1,0,0,0,132,133,5,44,0,0,133,134,3,8,4,0,134,135,5,45,0,0,135,7,
		1,0,0,0,136,140,3,10,5,0,137,140,3,24,12,0,138,140,5,55,0,0,139,136,1,
		0,0,0,139,137,1,0,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,142,5,48,0,0,
		142,144,3,8,4,0,143,141,1,0,0,0,143,144,1,0,0,0,144,9,1,0,0,0,145,146,
		5,55,0,0,146,147,5,33,0,0,147,148,3,24,12,0,148,11,1,0,0,0,149,152,3,14,
		7,0,150,151,5,47,0,0,151,153,3,12,6,0,152,150,1,0,0,0,152,153,1,0,0,0,
		153,13,1,0,0,0,154,156,3,22,11,0,155,154,1,0,0,0,155,156,1,0,0,0,156,157,
		1,0,0,0,157,158,5,55,0,0,158,161,3,18,9,0,159,162,3,24,12,0,160,162,5,
		55,0,0,161,159,1,0,0,0,161,160,1,0,0,0,162,164,1,0,0,0,163,165,5,47,0,
		0,164,163,1,0,0,0,164,165,1,0,0,0,165,181,1,0,0,0,166,167,5,55,0,0,167,
		169,3,16,8,0,168,170,5,47,0,0,169,168,1,0,0,0,169,170,1,0,0,0,170,181,
		1,0,0,0,171,172,3,16,8,0,172,174,5,55,0,0,173,175,5,47,0,0,174,173,1,0,
		0,0,174,175,1,0,0,0,175,181,1,0,0,0,176,177,5,55,0,0,177,178,3,6,3,0,178,
		179,5,47,0,0,179,181,1,0,0,0,180,155,1,0,0,0,180,166,1,0,0,0,180,171,1,
		0,0,0,180,176,1,0,0,0,181,15,1,0,0,0,182,183,7,0,0,0,183,17,1,0,0,0,184,
		185,7,1,0,0,185,19,1,0,0,0,186,190,5,40,0,0,187,191,3,24,12,0,188,191,
		5,55,0,0,189,191,3,20,10,0,190,187,1,0,0,0,190,188,1,0,0,0,190,189,1,0,
		0,0,191,192,1,0,0,0,192,193,5,41,0,0,193,21,1,0,0,0,194,195,7,2,0,0,195,
		23,1,0,0,0,196,198,6,12,-1,0,197,199,5,23,0,0,198,197,1,0,0,0,198,199,
		1,0,0,0,199,200,1,0,0,0,200,212,5,53,0,0,201,203,5,23,0,0,202,201,1,0,
		0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,212,5,54,0,0,205,212,5,56,0,0,
		206,212,3,26,13,0,207,212,5,55,0,0,208,212,3,30,15,0,209,212,3,32,16,0,
		210,212,3,20,10,0,211,196,1,0,0,0,211,202,1,0,0,0,211,205,1,0,0,0,211,
		206,1,0,0,0,211,207,1,0,0,0,211,208,1,0,0,0,211,209,1,0,0,0,211,210,1,
		0,0,0,212,219,1,0,0,0,213,214,10,5,0,0,214,215,3,28,14,0,215,216,3,24,
		12,6,216,218,1,0,0,0,217,213,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,
		220,1,0,0,0,220,25,1,0,0,0,221,219,1,0,0,0,222,223,7,3,0,0,223,27,1,0,
		0,0,224,225,7,4,0,0,225,29,1,0,0,0,226,227,5,55,0,0,227,229,5,40,0,0,228,
		230,3,40,20,0,229,228,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,
		5,41,0,0,232,31,1,0,0,0,233,234,7,5,0,0,234,235,5,40,0,0,235,236,3,34,
		17,0,236,243,3,36,18,0,237,238,5,48,0,0,238,239,3,34,17,0,239,240,3,36,
		18,0,240,242,1,0,0,0,241,237,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,
		244,1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,247,5,41,0,0,247,33,1,
		0,0,0,248,249,5,55,0,0,249,250,5,46,0,0,250,35,1,0,0,0,251,255,3,38,19,
		0,252,255,3,24,12,0,253,255,5,55,0,0,254,251,1,0,0,0,254,252,1,0,0,0,254,
		253,1,0,0,0,255,37,1,0,0,0,256,257,5,40,0,0,257,258,3,34,17,0,258,259,
		3,36,18,0,259,260,5,48,0,0,260,261,3,34,17,0,261,268,3,36,18,0,262,263,
		5,48,0,0,263,264,3,34,17,0,264,265,3,36,18,0,265,267,1,0,0,0,266,262,1,
		0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,
		270,268,1,0,0,0,271,272,5,41,0,0,272,39,1,0,0,0,273,274,6,20,-1,0,274,
		275,3,42,21,0,275,281,1,0,0,0,276,277,10,2,0,0,277,278,5,48,0,0,278,280,
		3,42,21,0,279,276,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,
		0,0,282,41,1,0,0,0,283,281,1,0,0,0,284,285,3,34,17,0,285,286,3,36,18,0,
		286,289,1,0,0,0,287,289,3,36,18,0,288,284,1,0,0,0,288,287,1,0,0,0,289,
		43,1,0,0,0,290,293,3,46,23,0,291,292,5,48,0,0,292,294,3,44,22,0,293,291,
		1,0,0,0,293,294,1,0,0,0,294,45,1,0,0,0,295,299,3,22,11,0,296,299,5,9,0,
		0,297,299,5,10,0,0,298,295,1,0,0,0,298,296,1,0,0,0,298,297,1,0,0,0,299,
		300,1,0,0,0,300,301,5,20,0,0,301,302,5,55,0,0,302,304,5,40,0,0,303,305,
		3,48,24,0,304,303,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,5,41,
		0,0,307,308,5,47,0,0,308,47,1,0,0,0,309,312,3,50,25,0,310,311,5,48,0,0,
		311,313,3,48,24,0,312,310,1,0,0,0,312,313,1,0,0,0,313,316,1,0,0,0,314,
		316,3,50,25,0,315,309,1,0,0,0,315,314,1,0,0,0,316,49,1,0,0,0,317,318,3,
		22,11,0,318,321,5,55,0,0,319,320,5,48,0,0,320,322,3,48,24,0,321,319,1,
		0,0,0,321,322,1,0,0,0,322,327,1,0,0,0,323,324,3,22,11,0,324,325,5,55,0,
		0,325,327,1,0,0,0,326,317,1,0,0,0,326,323,1,0,0,0,327,51,1,0,0,0,328,332,
		3,22,11,0,329,332,5,9,0,0,330,332,5,10,0,0,331,328,1,0,0,0,331,329,1,0,
		0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,334,5,20,0,0,334,335,5,55,0,0,
		335,337,5,40,0,0,336,338,3,48,24,0,337,336,1,0,0,0,337,338,1,0,0,0,338,
		339,1,0,0,0,339,340,5,41,0,0,340,341,3,54,27,0,341,53,1,0,0,0,342,343,
		5,42,0,0,343,345,3,56,28,0,344,346,3,62,31,0,345,344,1,0,0,0,345,346,1,
		0,0,0,346,347,1,0,0,0,347,348,5,43,0,0,348,55,1,0,0,0,349,350,3,58,29,
		0,350,351,3,56,28,0,351,354,1,0,0,0,352,354,3,58,29,0,353,349,1,0,0,0,
		353,352,1,0,0,0,354,57,1,0,0,0,355,360,3,14,7,0,356,360,3,60,30,0,357,
		360,3,64,32,0,358,360,3,76,38,0,359,355,1,0,0,0,359,356,1,0,0,0,359,357,
		1,0,0,0,359,358,1,0,0,0,360,59,1,0,0,0,361,362,5,55,0,0,362,363,3,8,4,
		0,363,61,1,0,0,0,364,365,5,21,0,0,365,366,3,24,12,0,366,367,5,47,0,0,367,
		373,1,0,0,0,368,369,5,21,0,0,369,370,3,6,3,0,370,371,5,47,0,0,371,373,
		1,0,0,0,372,364,1,0,0,0,372,368,1,0,0,0,373,63,1,0,0,0,374,377,3,66,33,
		0,375,377,3,68,34,0,376,374,1,0,0,0,376,375,1,0,0,0,377,65,1,0,0,0,378,
		379,5,4,0,0,379,380,5,40,0,0,380,381,3,14,7,0,381,382,3,70,35,0,382,383,
		5,47,0,0,383,384,3,14,7,0,384,385,5,41,0,0,385,386,3,54,27,0,386,67,1,
		0,0,0,387,388,5,5,0,0,388,389,5,40,0,0,389,390,3,70,35,0,390,391,5,41,
		0,0,391,392,3,54,27,0,392,69,1,0,0,0,393,396,3,24,12,0,394,397,3,74,37,
		0,395,397,3,72,36,0,396,394,1,0,0,0,396,395,1,0,0,0,397,398,1,0,0,0,398,
		407,3,24,12,0,399,402,3,74,37,0,400,402,3,72,36,0,401,399,1,0,0,0,401,
		400,1,0,0,0,402,403,1,0,0,0,403,404,3,24,12,0,404,406,1,0,0,0,405,401,
		1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,71,1,0,0,0,
		409,407,1,0,0,0,410,411,7,6,0,0,411,73,1,0,0,0,412,413,7,7,0,0,413,75,
		1,0,0,0,414,415,5,6,0,0,415,416,5,40,0,0,416,417,3,70,35,0,417,418,5,41,
		0,0,418,422,3,54,27,0,419,421,3,78,39,0,420,419,1,0,0,0,421,424,1,0,0,
		0,422,420,1,0,0,0,422,423,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,425,
		427,3,80,40,0,426,425,1,0,0,0,426,427,1,0,0,0,427,77,1,0,0,0,428,429,5,
		7,0,0,429,430,5,6,0,0,430,431,5,40,0,0,431,432,3,70,35,0,432,433,5,41,
		0,0,433,434,3,54,27,0,434,79,1,0,0,0,435,436,5,7,0,0,436,437,3,54,27,0,
		437,81,1,0,0,0,438,440,3,84,42,0,439,441,3,82,41,0,440,439,1,0,0,0,440,
		441,1,0,0,0,441,83,1,0,0,0,442,443,5,8,0,0,443,444,5,55,0,0,444,446,5,
		40,0,0,445,447,3,48,24,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,
		0,448,449,5,41,0,0,449,450,3,86,43,0,450,85,1,0,0,0,451,452,5,42,0,0,452,
		453,3,88,44,0,453,454,5,43,0,0,454,87,1,0,0,0,455,456,3,58,29,0,456,457,
		3,88,44,0,457,464,1,0,0,0,458,464,3,58,29,0,459,460,3,90,45,0,460,461,
		3,88,44,0,461,464,1,0,0,0,462,464,3,90,45,0,463,455,1,0,0,0,463,458,1,
		0,0,0,463,459,1,0,0,0,463,462,1,0,0,0,464,89,1,0,0,0,465,466,5,55,0,0,
		466,472,3,92,46,0,467,468,5,55,0,0,468,469,3,96,48,0,469,470,3,92,46,0,
		470,472,1,0,0,0,471,465,1,0,0,0,471,467,1,0,0,0,472,91,1,0,0,0,473,474,
		3,94,47,0,474,475,3,92,46,0,475,483,1,0,0,0,476,477,3,94,47,0,477,478,
		5,47,0,0,478,483,1,0,0,0,479,480,3,96,48,0,480,481,3,92,46,0,481,483,1,
		0,0,0,482,473,1,0,0,0,482,476,1,0,0,0,482,479,1,0,0,0,483,93,1,0,0,0,484,
		485,5,49,0,0,485,486,5,40,0,0,486,487,3,40,20,0,487,488,5,41,0,0,488,95,
		1,0,0,0,489,490,5,49,0,0,490,491,5,55,0,0,491,493,5,40,0,0,492,494,3,40,
		20,0,493,492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,496,5,41,0,0,
		496,97,1,0,0,0,497,501,5,42,0,0,498,500,3,100,50,0,499,498,1,0,0,0,500,
		503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,
		0,0,0,504,505,5,43,0,0,505,99,1,0,0,0,506,507,5,19,0,0,507,508,5,53,0,
		0,508,509,5,46,0,0,509,510,5,55,0,0,510,512,5,40,0,0,511,513,3,48,24,0,
		512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,5,41,0,0,515,516,
		5,47,0,0,516,101,1,0,0,0,52,110,114,119,123,127,139,143,152,155,161,164,
		169,174,180,190,198,202,211,219,229,243,254,268,281,288,293,298,304,312,
		315,321,326,331,337,345,353,359,372,376,396,401,407,422,426,440,446,463,
		471,482,493,501,512
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
