//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/pelle/RiderProjects/AST/AnimationLanguage/Content\AnimationLanguageRules.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class AnimationLanguageRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SETUP=1, PROTOTYPE=2, TIMELINE=3, FOR=4, WHILE=5, IF=6, SEQ=7, VOID=8, 
		GROUP=9, INT=10, FLOAT_TYPE=11, STRING_TYPE=12, BOOL=13, CIRCLE=14, POLYGON=15, 
		TRUE=16, FALSE=17, FRAME=18, FUNCTION=19, RETURN=20, PLUS=21, MINUS=22, 
		MULTIPLY=23, DIVIDE=24, MODULO=25, LT=26, GT=27, LE=28, GE=29, EQ=30, 
		NE=31, EQUAL=32, PLUSEQUAL=33, MINUSEQUAL=34, INC=35, DEC=36, LPAREN=37, 
		RPAREN=38, LBRACE=39, RBRACE=40, LBRACKET=41, RBRACKET=42, COLON=43, SEMICOLON=44, 
		COMMA=45, ARROW=46, MAP=47, QUOTE=48, DOT=49, INTEGER=50, FLOAT=51, IDENTIFIER=52, 
		STRING=53, WS=54, COMMENT=55;
	public const int
		RULE_s = 0, RULE_program = 1, RULE_setupBlock = 2, RULE_grouping = 3, 
		RULE_groupingElements = 4, RULE_keyValuePair = 5, RULE_assignments = 6, 
		RULE_assignment = 7, RULE_unary = 8, RULE_assOps = 9, RULE_term = 10, 
		RULE_type = 11, RULE_expression = 12, RULE_boolean = 13, RULE_operator = 14, 
		RULE_funcCall = 15, RULE_shapeinit = 16, RULE_argName = 17, RULE_arg = 18, 
		RULE_tuple = 19, RULE_call_parameters = 20, RULE_call_parameter = 21, 
		RULE_prototypes = 22, RULE_prototype = 23, RULE_parameters = 24, RULE_parameter = 25, 
		RULE_funcDecls = 26, RULE_funcDecl = 27, RULE_block = 28, RULE_statements = 29, 
		RULE_statement = 30, RULE_return = 31, RULE_loop = 32, RULE_for_loop = 33, 
		RULE_while_loop = 34, RULE_condition = 35, RULE_comparator = 36, RULE_conditional = 37, 
		RULE_sequences = 38, RULE_sequence = 39, RULE_seqBlock = 40, RULE_seqBlockParts = 41, 
		RULE_animation = 42, RULE_transitions = 43, RULE_transition = 44, RULE_command = 45, 
		RULE_timelineBlock = 46, RULE_frameDefs = 47, RULE_frameDef = 48;
	public static readonly string[] ruleNames = {
		"s", "program", "setupBlock", "grouping", "groupingElements", "keyValuePair", 
		"assignments", "assignment", "unary", "assOps", "term", "type", "expression", 
		"boolean", "operator", "funcCall", "shapeinit", "argName", "arg", "tuple", 
		"call_parameters", "call_parameter", "prototypes", "prototype", "parameters", 
		"parameter", "funcDecls", "funcDecl", "block", "statements", "statement", 
		"return", "loop", "for_loop", "while_loop", "condition", "comparator", 
		"conditional", "sequences", "sequence", "seqBlock", "seqBlockParts", "animation", 
		"transitions", "transition", "command", "timelineBlock", "frameDefs", 
		"frameDef"
	};

	private static readonly string[] _LiteralNames = {
		null, "'setup'", "'prototypes'", "'timeline'", "'for'", "'while'", "'if'", 
		"'seq'", "'void'", "'group'", "'int'", "'float'", "'string'", "'bool'", 
		"'Circle'", "'Polygon'", "'true'", "'false'", "'Frame'", "'function'", 
		"'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'='", "'+='", "'-='", "'++'", "'--'", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "':'", "';'", "','", "'->'", "'=>'", "'\"'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SETUP", "PROTOTYPE", "TIMELINE", "FOR", "WHILE", "IF", "SEQ", "VOID", 
		"GROUP", "INT", "FLOAT_TYPE", "STRING_TYPE", "BOOL", "CIRCLE", "POLYGON", 
		"TRUE", "FALSE", "FRAME", "FUNCTION", "RETURN", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "MODULO", "LT", "GT", "LE", "GE", "EQ", "NE", "EQUAL", "PLUSEQUAL", 
		"MINUSEQUAL", "INC", "DEC", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
		"RBRACKET", "COLON", "SEMICOLON", "COMMA", "ARROW", "MAP", "QUOTE", "DOT", 
		"INTEGER", "FLOAT", "IDENTIFIER", "STRING", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnimationLanguageRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnimationLanguageRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnimationLanguageRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnimationLanguageRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AnimationLanguageRulesParser.Eof, 0); }
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 0, RULE_s);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			program();
			State = 99;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMELINE() { return GetToken(AnimationLanguageRulesParser.TIMELINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(AnimationLanguageRulesParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetupBlockContext setupBlock() {
			return GetRuleContext<SetupBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTOTYPE() { return GetToken(AnimationLanguageRulesParser.PROTOTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrototypesContext prototypes() {
			return GetRuleContext<PrototypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclsContext funcDecls() {
			return GetRuleContext<FuncDeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequencesContext sequences() {
			return GetRuleContext<SequencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimelineBlockContext timelineBlock() {
			return GetRuleContext<TimelineBlockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SETUP) {
				{
				State = 101;
				Match(SETUP);
				State = 102;
				setupBlock();
				}
			}

			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROTOTYPE) {
				{
				State = 105;
				Match(PROTOTYPE);
				State = 106;
				Match(LBRACE);
				State = 107;
				prototypes();
				State = 108;
				Match(RBRACE);
				State = 109;
				funcDecls();
				}
			}

			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEQ) {
				{
				State = 113;
				sequences();
				}
			}

			State = 116;
			Match(TIMELINE);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 117;
				timelineBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		public SetupBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSetupBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSetupBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetupBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupBlockContext setupBlock() {
		SetupBlockContext _localctx = new SetupBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_setupBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			grouping();
			State = 121;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(AnimationLanguageRulesParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementsContext groupingElements() {
			return GetRuleContext<GroupingElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(AnimationLanguageRulesParser.RBRACKET, 0); }
		public GroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingContext grouping() {
		GroupingContext _localctx = new GroupingContext(Context, State);
		EnterRule(_localctx, 6, RULE_grouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(LBRACKET);
			State = 124;
			groupingElements();
			State = 125;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair() {
			return GetRuleContext<KeyValuePairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingElementsContext groupingElements() {
			return GetRuleContext<GroupingElementsContext>(0);
		}
		public GroupingElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterGroupingElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitGroupingElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingElementsContext groupingElements() {
		GroupingElementsContext _localctx = new GroupingElementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_groupingElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 127;
				keyValuePair();
				}
				break;
			case 2:
				{
				State = 128;
				expression(0);
				}
				break;
			case 3:
				{
				State = 129;
				Match(IDENTIFIER);
				}
				break;
			}
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 132;
				Match(COMMA);
				State = 133;
				groupingElements();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(AnimationLanguageRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 10, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(IDENTIFIER);
			State = 137;
			Match(EQUAL);
			State = 138;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			assignment();
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 141;
				Match(SEMICOLON);
				State = 142;
				assignments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AnimationLanguageRulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AnimationLanguageRulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssOpsContext assOps() {
			return GetRuleContext<AssOpsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64512L) != 0)) {
					{
					State = 145;
					type();
					}
				}

				State = 148;
				Match(IDENTIFIER);
				State = 149;
				assOps();
				State = 152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 150;
					expression(0);
					}
					break;
				case 2:
					{
					State = 151;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 155;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 154;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				Match(IDENTIFIER);
				State = 158;
				unary();
				State = 160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 159;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162;
				unary();
				State = 163;
				Match(IDENTIFIER);
				State = 165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 164;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				Match(IDENTIFIER);
				State = 168;
				grouping();
				State = 169;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(AnimationLanguageRulesParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(AnimationLanguageRulesParser.INC, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssOpsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(AnimationLanguageRulesParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(AnimationLanguageRulesParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSEQUAL() { return GetToken(AnimationLanguageRulesParser.MINUSEQUAL, 0); }
		public AssOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assOps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAssOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAssOps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssOpsContext assOps() {
		AssOpsContext _localctx = new AssOpsContext(Context, State);
		EnterRule(_localctx, 18, RULE_assOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 20, RULE_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(LPAREN);
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 178;
				expression(0);
				}
				break;
			case 2:
				{
				State = 179;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 180;
				term();
				}
				break;
			}
			State = 183;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnimationLanguageRulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(AnimationLanguageRulesParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(AnimationLanguageRulesParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AnimationLanguageRulesParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCLE() { return GetToken(AnimationLanguageRulesParser.CIRCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(AnimationLanguageRulesParser.POLYGON, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 64512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AnimationLanguageRulesParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(AnimationLanguageRulesParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AnimationLanguageRulesParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeinitContext shapeinit() {
			return GetRuleContext<ShapeinitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 188;
					Match(MINUS);
					}
				}

				State = 191;
				Match(INTEGER);
				}
				break;
			case 2:
				{
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 192;
					Match(MINUS);
					}
				}

				State = 195;
				Match(FLOAT);
				}
				break;
			case 3:
				{
				State = 196;
				Match(STRING);
				}
				break;
			case 4:
				{
				State = 197;
				boolean();
				}
				break;
			case 5:
				{
				State = 198;
				Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				State = 199;
				funcCall();
				}
				break;
			case 7:
				{
				State = 200;
				shapeinit();
				}
				break;
			case 8:
				{
				State = 201;
				term();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 204;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 205;
					@operator();
					State = 206;
					expression(6);
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(AnimationLanguageRulesParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(AnimationLanguageRulesParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 26, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AnimationLanguageRulesParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AnimationLanguageRulesParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(AnimationLanguageRulesParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(AnimationLanguageRulesParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(AnimationLanguageRulesParser.MODULO, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65011712L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(IDENTIFIER);
			State = 218;
			Match(LPAREN);
			State = 219;
			call_parameters(0);
			State = 220;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeinitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext[] argName() {
			return GetRuleContexts<ArgNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName(int i) {
			return GetRuleContext<ArgNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(AnimationLanguageRulesParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCLE() { return GetToken(AnimationLanguageRulesParser.CIRCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		public ShapeinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shapeinit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterShapeinit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitShapeinit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShapeinit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShapeinitContext shapeinit() {
		ShapeinitContext _localctx = new ShapeinitContext(Context, State);
		EnterRule(_localctx, 32, RULE_shapeinit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = TokenStream.LA(1);
			if ( !(_la==CIRCLE || _la==POLYGON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 223;
			Match(LPAREN);
			State = 224;
			argName();
			State = 225;
			arg();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 226;
				Match(COMMA);
				State = 227;
				argName();
				State = 228;
				arg();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AnimationLanguageRulesParser.COLON, 0); }
		public ArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgNameContext argName() {
		ArgNameContext _localctx = new ArgNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_argName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(IDENTIFIER);
			State = 238;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 36, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 240;
				tuple();
				}
				break;
			case 2:
				{
				State = 241;
				expression(0);
				}
				break;
			case 3:
				{
				State = 242;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext[] argName() {
			return GetRuleContexts<ArgNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName(int i) {
			return GetRuleContext<ArgNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AnimationLanguageRulesParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AnimationLanguageRulesParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 38, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(LPAREN);
			State = 246;
			argName();
			State = 247;
			arg();
			State = 248;
			Match(COMMA);
			State = 249;
			argName();
			State = 250;
			arg();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 251;
				Match(COMMA);
				State = 252;
				argName();
				State = 253;
				arg();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 260;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_parameterContext call_parameter() {
			return GetRuleContext<Call_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		public Call_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCall_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCall_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_parametersContext call_parameters() {
		return call_parameters(0);
	}

	private Call_parametersContext call_parameters(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_parametersContext _localctx = new Call_parametersContext(Context, _parentState);
		Call_parametersContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_call_parameters, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 263;
			call_parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_parametersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_call_parameters);
					State = 265;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 266;
					Match(COMMA);
					State = 267;
					call_parameter();
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Call_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgNameContext argName() {
			return GetRuleContext<ArgNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public Call_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCall_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCall_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_parameterContext call_parameter() {
		Call_parameterContext _localctx = new Call_parameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_call_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 273;
				argName();
				State = 274;
				arg();
				}
				break;
			case 2:
				{
				State = 276;
				arg();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrototypeContext prototype() {
			return GetRuleContext<PrototypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrototypesContext prototypes() {
			return GetRuleContext<PrototypesContext>(0);
		}
		public PrototypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterPrototypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitPrototypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrototypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrototypesContext prototypes() {
		PrototypesContext _localctx = new PrototypesContext(Context, State);
		EnterRule(_localctx, 44, RULE_prototypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			prototype();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 280;
				Match(COMMA);
				State = 281;
				prototypes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AnimationLanguageRulesParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AnimationLanguageRulesParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		public PrototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitPrototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrototypeContext prototype() {
		PrototypeContext _localctx = new PrototypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_prototype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT_TYPE:
			case STRING_TYPE:
			case BOOL:
			case CIRCLE:
			case POLYGON:
				{
				State = 284;
				type();
				}
				break;
			case VOID:
				{
				State = 285;
				Match(VOID);
				}
				break;
			case GROUP:
				{
				State = 286;
				Match(GROUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 289;
			Match(FUNCTION);
			State = 290;
			Match(IDENTIFIER);
			State = 291;
			Match(LPAREN);
			State = 292;
			parameters();
			State = 293;
			Match(RPAREN);
			State = 294;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameters);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				parameter();
				State = 299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 297;
					Match(COMMA);
					State = 298;
					parameters();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				parameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AnimationLanguageRulesParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameter);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				type();
				State = 306;
				Match(IDENTIFIER);
				State = 309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 307;
					Match(COMMA);
					State = 308;
					parameters();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311;
				type();
				State = 312;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		public FuncDeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclsContext funcDecls() {
		FuncDeclsContext _localctx = new FuncDeclsContext(Context, State);
		EnterRule(_localctx, 52, RULE_funcDecls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 65280L) != 0)) {
				{
				{
				State = 317;
				funcDecl();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AnimationLanguageRulesParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AnimationLanguageRulesParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 54, RULE_funcDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT_TYPE:
			case STRING_TYPE:
			case BOOL:
			case CIRCLE:
			case POLYGON:
				{
				State = 323;
				type();
				}
				break;
			case VOID:
				{
				State = 324;
				Match(VOID);
				}
				break;
			case GROUP:
				{
				State = 325;
				Match(GROUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 328;
			Match(FUNCTION);
			State = 329;
			Match(IDENTIFIER);
			State = 330;
			Match(LPAREN);
			State = 331;
			parameters();
			State = 332;
			Match(RPAREN);
			State = 333;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(LBRACE);
			State = 336;
			statements();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 337;
				@return();
				}
			}

			State = 340;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 58, RULE_statements);
		try {
			State = 347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				statement();
				State = 343;
				statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(AnimationLanguageRulesParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_statement);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT_TYPE:
			case STRING_TYPE:
			case BOOL:
			case CIRCLE:
			case POLYGON:
			case INC:
			case DEC:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				assignment();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				Match(GROUP);
				State = 351;
				Match(IDENTIFIER);
				State = 352;
				grouping();
				}
				break;
			case FOR:
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 353;
				loop();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 354;
				conditional();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AnimationLanguageRulesParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingContext grouping() {
			return GetRuleContext<GroupingContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 62, RULE_return);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357;
				Match(RETURN);
				State = 358;
				Match(IDENTIFIER);
				State = 359;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				Match(RETURN);
				State = 361;
				grouping();
				State = 362;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 64, RULE_loop);
		try {
			State = 368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366;
				for_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AnimationLanguageRulesParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 66, RULE_for_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(FOR);
			State = 371;
			Match(LPAREN);
			State = 372;
			assignment();
			State = 373;
			condition();
			State = 374;
			Match(SEMICOLON);
			State = 375;
			assignment();
			State = 376;
			Match(RPAREN);
			State = 377;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AnimationLanguageRulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 68, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(WHILE);
			State = 380;
			Match(LPAREN);
			State = 381;
			condition();
			State = 382;
			Match(RPAREN);
			State = 383;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 70, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			expression(0);
			State = 386;
			comparator();
			State = 387;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(AnimationLanguageRulesParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(AnimationLanguageRulesParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(AnimationLanguageRulesParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(AnimationLanguageRulesParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AnimationLanguageRulesParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(AnimationLanguageRulesParser.NE, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4227858432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AnimationLanguageRulesParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 74, RULE_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(IF);
			State = 392;
			Match(LPAREN);
			State = 393;
			condition();
			State = 394;
			Match(RPAREN);
			State = 395;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequencesContext sequences() {
			return GetRuleContext<SequencesContext>(0);
		}
		public SequencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSequences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSequences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequencesContext sequences() {
		SequencesContext _localctx = new SequencesContext(Context, State);
		EnterRule(_localctx, 76, RULE_sequences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			sequence();
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEQ) {
				{
				State = 398;
				sequences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQ() { return GetToken(AnimationLanguageRulesParser.SEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockContext seqBlock() {
			return GetRuleContext<SeqBlockContext>(0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 78, RULE_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(SEQ);
			State = 402;
			Match(IDENTIFIER);
			State = 403;
			Match(LPAREN);
			State = 404;
			parameters();
			State = 405;
			Match(RPAREN);
			State = 406;
			seqBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockPartsContext seqBlockParts() {
			return GetRuleContext<SeqBlockPartsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		public SeqBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSeqBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSeqBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeqBlockContext seqBlock() {
		SeqBlockContext _localctx = new SeqBlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_seqBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(LBRACE);
			State = 409;
			seqBlockParts();
			State = 410;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqBlockPartsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqBlockPartsContext seqBlockParts() {
			return GetRuleContext<SeqBlockPartsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimationContext animation() {
			return GetRuleContext<AnimationContext>(0);
		}
		public SeqBlockPartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqBlockParts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterSeqBlockParts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitSeqBlockParts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeqBlockParts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeqBlockPartsContext seqBlockParts() {
		SeqBlockPartsContext _localctx = new SeqBlockPartsContext(Context, State);
		EnterRule(_localctx, 82, RULE_seqBlockParts);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				statement();
				State = 413;
				seqBlockParts();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 416;
				animation();
				State = 417;
				seqBlockParts();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419;
				animation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransitionsContext transitions() {
			return GetRuleContext<TransitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public AnimationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterAnimation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitAnimation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimationContext animation() {
		AnimationContext _localctx = new AnimationContext(Context, State);
		EnterRule(_localctx, 84, RULE_animation);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				Match(IDENTIFIER);
				State = 423;
				transitions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424;
				Match(IDENTIFIER);
				State = 425;
				command();
				State = 426;
				transitions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition() {
			return GetRuleContext<TransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionsContext transitions() {
			return GetRuleContext<TransitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public TransitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionsContext transitions() {
		TransitionsContext _localctx = new TransitionsContext(Context, State);
		EnterRule(_localctx, 86, RULE_transitions);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430;
				transition();
				State = 431;
				transitions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				transition();
				State = 434;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				command();
				State = 437;
				transitions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(AnimationLanguageRulesParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_transition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(ARROW);
			State = 442;
			Match(LPAREN);
			State = 443;
			call_parameters(0);
			State = 444;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(AnimationLanguageRulesParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_parametersContext call_parameters() {
			return GetRuleContext<Call_parametersContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 90, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(ARROW);
			State = 447;
			Match(IDENTIFIER);
			State = 448;
			Match(LPAREN);
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16888636046032896L) != 0)) {
				{
				State = 449;
				call_parameters(0);
				}
			}

			State = 452;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimelineBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AnimationLanguageRulesParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameDefsContext frameDefs() {
			return GetRuleContext<FrameDefsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AnimationLanguageRulesParser.RBRACE, 0); }
		public TimelineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timelineBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterTimelineBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitTimelineBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimelineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimelineBlockContext timelineBlock() {
		TimelineBlockContext _localctx = new TimelineBlockContext(Context, State);
		EnterRule(_localctx, 92, RULE_timelineBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(LBRACE);
			State = 455;
			frameDefs();
			State = 456;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameDefsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameDefContext[] frameDef() {
			return GetRuleContexts<FrameDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameDefContext frameDef(int i) {
			return GetRuleContext<FrameDefContext>(i);
		}
		public FrameDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameDefs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFrameDefs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFrameDefs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameDefs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameDefsContext frameDefs() {
		FrameDefsContext _localctx = new FrameDefsContext(Context, State);
		EnterRule(_localctx, 94, RULE_frameDefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FRAME) {
				{
				{
				State = 458;
				frameDef();
				}
				}
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAME() { return GetToken(AnimationLanguageRulesParser.FRAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AnimationLanguageRulesParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AnimationLanguageRulesParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AnimationLanguageRulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AnimationLanguageRulesParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AnimationLanguageRulesParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AnimationLanguageRulesParser.SEMICOLON, 0); }
		public FrameDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.EnterFrameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationLanguageRulesListener typedListener = listener as IAnimationLanguageRulesListener;
			if (typedListener != null) typedListener.ExitFrameDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationLanguageRulesVisitor<TResult> typedVisitor = visitor as IAnimationLanguageRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameDefContext frameDef() {
		FrameDefContext _localctx = new FrameDefContext(Context, State);
		EnterRule(_localctx, 96, RULE_frameDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(FRAME);
			State = 465;
			Match(INTEGER);
			State = 466;
			Match(COLON);
			State = 467;
			Match(IDENTIFIER);
			State = 468;
			Match(LPAREN);
			State = 469;
			parameters();
			State = 470;
			Match(RPAREN);
			State = 471;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return call_parameters_sempred((Call_parametersContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}
	private bool call_parameters_sempred(Call_parametersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,474,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,
		0,1,1,1,1,3,1,104,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,112,8,1,1,1,3,1,115,
		8,1,1,1,1,1,3,1,119,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,3,4,131,
		8,4,1,4,1,4,3,4,135,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,144,8,6,1,7,3,
		7,147,8,7,1,7,1,7,1,7,1,7,3,7,153,8,7,1,7,3,7,156,8,7,1,7,1,7,1,7,3,7,
		161,8,7,1,7,1,7,1,7,3,7,166,8,7,1,7,1,7,1,7,1,7,3,7,172,8,7,1,8,1,8,1,
		9,1,9,1,10,1,10,1,10,1,10,3,10,182,8,10,1,10,1,10,1,11,1,11,1,12,1,12,
		3,12,190,8,12,1,12,1,12,3,12,194,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,3,12,203,8,12,1,12,1,12,1,12,1,12,5,12,209,8,12,10,12,12,12,212,9,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,5,16,231,8,16,10,16,12,16,234,9,16,1,16,1,16,1,17,1,17,
		1,17,1,18,1,18,1,18,3,18,244,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,5,19,256,8,19,10,19,12,19,259,9,19,1,19,1,19,1,20,1,20,1,
		20,1,20,1,20,1,20,5,20,269,8,20,10,20,12,20,272,9,20,1,21,1,21,1,21,1,
		21,3,21,278,8,21,1,22,1,22,1,22,3,22,283,8,22,1,23,1,23,1,23,3,23,288,
		8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,3,24,300,8,24,1,
		24,1,24,3,24,304,8,24,1,25,1,25,1,25,1,25,3,25,310,8,25,1,25,1,25,1,25,
		1,25,3,25,316,8,25,1,26,5,26,319,8,26,10,26,12,26,322,9,26,1,27,1,27,1,
		27,3,27,327,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,
		339,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,3,29,348,8,29,1,30,1,30,1,
		30,1,30,1,30,1,30,3,30,356,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
		365,8,31,1,32,1,32,3,32,369,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,
		37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,3,38,400,8,38,1,39,1,39,1,39,1,39,
		1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,3,41,421,8,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,429,8,42,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,440,8,43,1,44,1,44,1,44,1,44,
		1,44,1,45,1,45,1,45,1,45,3,45,451,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,
		47,5,47,460,8,47,10,47,12,47,463,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,
		48,1,48,1,48,1,48,0,2,24,40,49,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,0,7,1,0,35,36,1,0,32,34,1,0,10,15,1,0,16,
		17,1,0,21,25,1,0,14,15,1,0,26,31,487,0,98,1,0,0,0,2,103,1,0,0,0,4,120,
		1,0,0,0,6,123,1,0,0,0,8,130,1,0,0,0,10,136,1,0,0,0,12,140,1,0,0,0,14,171,
		1,0,0,0,16,173,1,0,0,0,18,175,1,0,0,0,20,177,1,0,0,0,22,185,1,0,0,0,24,
		202,1,0,0,0,26,213,1,0,0,0,28,215,1,0,0,0,30,217,1,0,0,0,32,222,1,0,0,
		0,34,237,1,0,0,0,36,243,1,0,0,0,38,245,1,0,0,0,40,262,1,0,0,0,42,277,1,
		0,0,0,44,279,1,0,0,0,46,287,1,0,0,0,48,303,1,0,0,0,50,315,1,0,0,0,52,320,
		1,0,0,0,54,326,1,0,0,0,56,335,1,0,0,0,58,347,1,0,0,0,60,355,1,0,0,0,62,
		364,1,0,0,0,64,368,1,0,0,0,66,370,1,0,0,0,68,379,1,0,0,0,70,385,1,0,0,
		0,72,389,1,0,0,0,74,391,1,0,0,0,76,397,1,0,0,0,78,401,1,0,0,0,80,408,1,
		0,0,0,82,420,1,0,0,0,84,428,1,0,0,0,86,439,1,0,0,0,88,441,1,0,0,0,90,446,
		1,0,0,0,92,454,1,0,0,0,94,461,1,0,0,0,96,464,1,0,0,0,98,99,3,2,1,0,99,
		100,5,0,0,1,100,1,1,0,0,0,101,102,5,1,0,0,102,104,3,4,2,0,103,101,1,0,
		0,0,103,104,1,0,0,0,104,111,1,0,0,0,105,106,5,2,0,0,106,107,5,39,0,0,107,
		108,3,44,22,0,108,109,5,40,0,0,109,110,3,52,26,0,110,112,1,0,0,0,111,105,
		1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,115,3,76,38,0,114,113,1,0,
		0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,118,5,3,0,0,117,119,3,92,46,0,
		118,117,1,0,0,0,118,119,1,0,0,0,119,3,1,0,0,0,120,121,3,6,3,0,121,122,
		5,44,0,0,122,5,1,0,0,0,123,124,5,41,0,0,124,125,3,8,4,0,125,126,5,42,0,
		0,126,7,1,0,0,0,127,131,3,10,5,0,128,131,3,24,12,0,129,131,5,52,0,0,130,
		127,1,0,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,134,1,0,0,0,132,133,5,
		45,0,0,133,135,3,8,4,0,134,132,1,0,0,0,134,135,1,0,0,0,135,9,1,0,0,0,136,
		137,5,52,0,0,137,138,5,32,0,0,138,139,3,24,12,0,139,11,1,0,0,0,140,143,
		3,14,7,0,141,142,5,44,0,0,142,144,3,12,6,0,143,141,1,0,0,0,143,144,1,0,
		0,0,144,13,1,0,0,0,145,147,3,22,11,0,146,145,1,0,0,0,146,147,1,0,0,0,147,
		148,1,0,0,0,148,149,5,52,0,0,149,152,3,18,9,0,150,153,3,24,12,0,151,153,
		5,52,0,0,152,150,1,0,0,0,152,151,1,0,0,0,153,155,1,0,0,0,154,156,5,44,
		0,0,155,154,1,0,0,0,155,156,1,0,0,0,156,172,1,0,0,0,157,158,5,52,0,0,158,
		160,3,16,8,0,159,161,5,44,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,172,
		1,0,0,0,162,163,3,16,8,0,163,165,5,52,0,0,164,166,5,44,0,0,165,164,1,0,
		0,0,165,166,1,0,0,0,166,172,1,0,0,0,167,168,5,52,0,0,168,169,3,6,3,0,169,
		170,5,44,0,0,170,172,1,0,0,0,171,146,1,0,0,0,171,157,1,0,0,0,171,162,1,
		0,0,0,171,167,1,0,0,0,172,15,1,0,0,0,173,174,7,0,0,0,174,17,1,0,0,0,175,
		176,7,1,0,0,176,19,1,0,0,0,177,181,5,37,0,0,178,182,3,24,12,0,179,182,
		5,52,0,0,180,182,3,20,10,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,0,
		0,0,182,183,1,0,0,0,183,184,5,38,0,0,184,21,1,0,0,0,185,186,7,2,0,0,186,
		23,1,0,0,0,187,189,6,12,-1,0,188,190,5,22,0,0,189,188,1,0,0,0,189,190,
		1,0,0,0,190,191,1,0,0,0,191,203,5,50,0,0,192,194,5,22,0,0,193,192,1,0,
		0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,203,5,51,0,0,196,203,5,53,0,0,
		197,203,3,26,13,0,198,203,5,52,0,0,199,203,3,30,15,0,200,203,3,32,16,0,
		201,203,3,20,10,0,202,187,1,0,0,0,202,193,1,0,0,0,202,196,1,0,0,0,202,
		197,1,0,0,0,202,198,1,0,0,0,202,199,1,0,0,0,202,200,1,0,0,0,202,201,1,
		0,0,0,203,210,1,0,0,0,204,205,10,5,0,0,205,206,3,28,14,0,206,207,3,24,
		12,6,207,209,1,0,0,0,208,204,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,
		211,1,0,0,0,211,25,1,0,0,0,212,210,1,0,0,0,213,214,7,3,0,0,214,27,1,0,
		0,0,215,216,7,4,0,0,216,29,1,0,0,0,217,218,5,52,0,0,218,219,5,37,0,0,219,
		220,3,40,20,0,220,221,5,38,0,0,221,31,1,0,0,0,222,223,7,5,0,0,223,224,
		5,37,0,0,224,225,3,34,17,0,225,232,3,36,18,0,226,227,5,45,0,0,227,228,
		3,34,17,0,228,229,3,36,18,0,229,231,1,0,0,0,230,226,1,0,0,0,231,234,1,
		0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,
		235,236,5,38,0,0,236,33,1,0,0,0,237,238,5,52,0,0,238,239,5,43,0,0,239,
		35,1,0,0,0,240,244,3,38,19,0,241,244,3,24,12,0,242,244,5,52,0,0,243,240,
		1,0,0,0,243,241,1,0,0,0,243,242,1,0,0,0,244,37,1,0,0,0,245,246,5,37,0,
		0,246,247,3,34,17,0,247,248,3,36,18,0,248,249,5,45,0,0,249,250,3,34,17,
		0,250,257,3,36,18,0,251,252,5,45,0,0,252,253,3,34,17,0,253,254,3,36,18,
		0,254,256,1,0,0,0,255,251,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,
		258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,38,0,0,261,39,1,
		0,0,0,262,263,6,20,-1,0,263,264,3,42,21,0,264,270,1,0,0,0,265,266,10,2,
		0,0,266,267,5,45,0,0,267,269,3,42,21,0,268,265,1,0,0,0,269,272,1,0,0,0,
		270,268,1,0,0,0,270,271,1,0,0,0,271,41,1,0,0,0,272,270,1,0,0,0,273,274,
		3,34,17,0,274,275,3,36,18,0,275,278,1,0,0,0,276,278,3,36,18,0,277,273,
		1,0,0,0,277,276,1,0,0,0,278,43,1,0,0,0,279,282,3,46,23,0,280,281,5,45,
		0,0,281,283,3,44,22,0,282,280,1,0,0,0,282,283,1,0,0,0,283,45,1,0,0,0,284,
		288,3,22,11,0,285,288,5,8,0,0,286,288,5,9,0,0,287,284,1,0,0,0,287,285,
		1,0,0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,290,5,19,0,0,290,291,5,52,
		0,0,291,292,5,37,0,0,292,293,3,48,24,0,293,294,5,38,0,0,294,295,5,44,0,
		0,295,47,1,0,0,0,296,299,3,50,25,0,297,298,5,45,0,0,298,300,3,48,24,0,
		299,297,1,0,0,0,299,300,1,0,0,0,300,304,1,0,0,0,301,304,3,50,25,0,302,
		304,1,0,0,0,303,296,1,0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,49,1,0,
		0,0,305,306,3,22,11,0,306,309,5,52,0,0,307,308,5,45,0,0,308,310,3,48,24,
		0,309,307,1,0,0,0,309,310,1,0,0,0,310,316,1,0,0,0,311,312,3,22,11,0,312,
		313,5,52,0,0,313,316,1,0,0,0,314,316,1,0,0,0,315,305,1,0,0,0,315,311,1,
		0,0,0,315,314,1,0,0,0,316,51,1,0,0,0,317,319,3,54,27,0,318,317,1,0,0,0,
		319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,53,1,0,0,0,322,320,
		1,0,0,0,323,327,3,22,11,0,324,327,5,8,0,0,325,327,5,9,0,0,326,323,1,0,
		0,0,326,324,1,0,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,329,5,19,0,0,329,
		330,5,52,0,0,330,331,5,37,0,0,331,332,3,48,24,0,332,333,5,38,0,0,333,334,
		3,56,28,0,334,55,1,0,0,0,335,336,5,39,0,0,336,338,3,58,29,0,337,339,3,
		62,31,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,5,40,0,
		0,341,57,1,0,0,0,342,343,3,60,30,0,343,344,3,58,29,0,344,348,1,0,0,0,345,
		348,3,60,30,0,346,348,1,0,0,0,347,342,1,0,0,0,347,345,1,0,0,0,347,346,
		1,0,0,0,348,59,1,0,0,0,349,356,3,14,7,0,350,351,5,9,0,0,351,352,5,52,0,
		0,352,356,3,6,3,0,353,356,3,64,32,0,354,356,3,74,37,0,355,349,1,0,0,0,
		355,350,1,0,0,0,355,353,1,0,0,0,355,354,1,0,0,0,356,61,1,0,0,0,357,358,
		5,20,0,0,358,359,5,52,0,0,359,365,5,44,0,0,360,361,5,20,0,0,361,362,3,
		6,3,0,362,363,5,44,0,0,363,365,1,0,0,0,364,357,1,0,0,0,364,360,1,0,0,0,
		365,63,1,0,0,0,366,369,3,66,33,0,367,369,3,68,34,0,368,366,1,0,0,0,368,
		367,1,0,0,0,369,65,1,0,0,0,370,371,5,4,0,0,371,372,5,37,0,0,372,373,3,
		14,7,0,373,374,3,70,35,0,374,375,5,44,0,0,375,376,3,14,7,0,376,377,5,38,
		0,0,377,378,3,56,28,0,378,67,1,0,0,0,379,380,5,5,0,0,380,381,5,37,0,0,
		381,382,3,70,35,0,382,383,5,38,0,0,383,384,3,56,28,0,384,69,1,0,0,0,385,
		386,3,24,12,0,386,387,3,72,36,0,387,388,3,24,12,0,388,71,1,0,0,0,389,390,
		7,6,0,0,390,73,1,0,0,0,391,392,5,6,0,0,392,393,5,37,0,0,393,394,3,70,35,
		0,394,395,5,38,0,0,395,396,3,56,28,0,396,75,1,0,0,0,397,399,3,78,39,0,
		398,400,3,76,38,0,399,398,1,0,0,0,399,400,1,0,0,0,400,77,1,0,0,0,401,402,
		5,7,0,0,402,403,5,52,0,0,403,404,5,37,0,0,404,405,3,48,24,0,405,406,5,
		38,0,0,406,407,3,80,40,0,407,79,1,0,0,0,408,409,5,39,0,0,409,410,3,82,
		41,0,410,411,5,40,0,0,411,81,1,0,0,0,412,413,3,60,30,0,413,414,3,82,41,
		0,414,421,1,0,0,0,415,421,3,60,30,0,416,417,3,84,42,0,417,418,3,82,41,
		0,418,421,1,0,0,0,419,421,3,84,42,0,420,412,1,0,0,0,420,415,1,0,0,0,420,
		416,1,0,0,0,420,419,1,0,0,0,421,83,1,0,0,0,422,423,5,52,0,0,423,429,3,
		86,43,0,424,425,5,52,0,0,425,426,3,90,45,0,426,427,3,86,43,0,427,429,1,
		0,0,0,428,422,1,0,0,0,428,424,1,0,0,0,429,85,1,0,0,0,430,431,3,88,44,0,
		431,432,3,86,43,0,432,440,1,0,0,0,433,434,3,88,44,0,434,435,5,44,0,0,435,
		440,1,0,0,0,436,437,3,90,45,0,437,438,3,86,43,0,438,440,1,0,0,0,439,430,
		1,0,0,0,439,433,1,0,0,0,439,436,1,0,0,0,440,87,1,0,0,0,441,442,5,46,0,
		0,442,443,5,37,0,0,443,444,3,40,20,0,444,445,5,38,0,0,445,89,1,0,0,0,446,
		447,5,46,0,0,447,448,5,52,0,0,448,450,5,37,0,0,449,451,3,40,20,0,450,449,
		1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,453,5,38,0,0,453,91,1,0,0,
		0,454,455,5,39,0,0,455,456,3,94,47,0,456,457,5,40,0,0,457,93,1,0,0,0,458,
		460,3,96,48,0,459,458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,
		1,0,0,0,462,95,1,0,0,0,463,461,1,0,0,0,464,465,5,18,0,0,465,466,5,50,0,
		0,466,467,5,43,0,0,467,468,5,52,0,0,468,469,5,37,0,0,469,470,3,48,24,0,
		470,471,5,38,0,0,471,472,5,44,0,0,472,97,1,0,0,0,42,103,111,114,118,130,
		134,143,146,152,155,160,165,171,181,189,193,202,210,232,243,257,270,277,
		282,287,299,303,309,315,320,326,338,347,355,364,368,399,420,428,439,450,
		461
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
